{"ast":null,"code":"import React,{useState}from\"react\";import{Link}from\"react-router-dom\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const MemberIdFind=()=>{const[memberName,setMemberName]=useState(\"\");const[memberBirth,setMemberBirth]=useState(\"\");const[memberPhone,setMemberPhone]=useState(\"\");const[change,setChange]=useState(false);const[userInfo,setUserInfo]=useState(null);const[inputType,setInputType]=useState(\"none\");// 정규식 \nconst nameRegex=/^[가-힣]{1,6}$|^[a-zA-Z\\s\\-]{5,15}$/;const birthRegex=/^\\d{6}-[1-4]$/;const phoneRegex=/^(01[016789])[-\\s]?\\d{3,4}[-\\s]?\\d{4}$/;// 이름 핸들러\nconst nameHandleChange=e=>{const value=e.target.value;const firstChar=value.charAt(0);// 첫 번째 문자에 따라 입력 타입 설정\nif(/^[ㄱ-힇]$/.test(firstChar)){setInputType(\"korean\");}else if(/^[a-zA-Z]$/.test(firstChar)){setInputType(\"english\");}// 입력 타입에 맞게 값 필터링\nif(inputType===\"korean\"&&/^[ㄱ-힣]*$/.test(value)){setMemberName(value);}else if(inputType===\"english\"&&/^[a-zA-Z]*$/.test(value)){setMemberName(value);}else if(inputType===\"none\"){setMemberName(value);// 입력 타입이 설정되지 않은 경우에는 입력을 허용합니다.\n}};// *****************************************전화번호 형식 ********************************************\nconst formatPhoneNumber=value=>{const cleanedPhone=value.replace(/\\D/g,'');if(cleanedPhone.length<=3){return cleanedPhone;}if(cleanedPhone.length<=7){return`${cleanedPhone.slice(0,3)}-${cleanedPhone.slice(3)}`;}return`${cleanedPhone.slice(0,3)}-${cleanedPhone.slice(3,7)}-${cleanedPhone.slice(7,11)}`;};// 전화번호 핸들러\nconst phoneHandleChange=e=>{const formattedPhoneNumber=formatPhoneNumber(e.target.value);setMemberPhone(formattedPhoneNumber);};// *******************************************************************************************************\n//---------------------------------------------주민번호 날짜 관련 정규식 부가적인 요소------------------------------------------------\n// 날짜 유효성 검사 함수\nconst isDateValid=birthDate=>{const[datePart,genderPart]=birthDate.split('-');// 날짜 부분이 올바른지 확인\nif(datePart.length!==6||!/^\\d{6}$/.test(datePart)||!/^[1-4]$/.test(genderPart)){return false;}// 연도, 월, 일 추출\nconst yy=parseInt(datePart.slice(0,2),10);const mm=parseInt(datePart.slice(2,4),10);const dd=parseInt(datePart.slice(4,6),10);// YY를 YYYY로 변환\nconst year=yy>=0&&yy<=99?yy<30?2000+yy:1900+yy:yy;// 월과 일 유효성 검사\nif(mm<1||mm>12)return false;// 월이 1~12 사이인지 확인\n// 월에 따라 일자 유효성 검사\nconst daysInMonth=new Date(year,mm,0).getDate();if(dd<1||dd>daysInMonth)return false;// 일자가 월의 일수 범위 내인지 확인\nreturn true;};// 입력값 처리 함수\nconst birthHandleChange=e=>{let value=e.target.value;// 숫자만 허용\nvalue=value.replace(/[^\\d]/g,'');// 하이픈 추가\nif(value.length>6){value=value.slice(0,6)+'-'+value.slice(6,7);}setMemberBirth(value);};const idFind=()=>{// 정규식 이름 생년월일 전화번호 정의\nif(!nameRegex.test(memberName)){alert(\"이름 형식을 올바르게 입력해주세요.\");return;}// 주민번호 정규식 \nif(!birthRegex.test(memberBirth)){alert(\"생년월일 형식을 올바르게 입력해주세요. (oooooo-o)\");return;}// 전화번호 공백 불가\nif(!memberPhone){alert(\"전화번호를 입력해주세요.\");return;}// 전화번호 정규식 \nif(!phoneRegex.test(memberPhone)){alert(\"전화번호를 올바른 형식으로 입력해주세요.\");return;}// 이름 공백 불가\nif(!memberName.trim()){alert(\"이름을 입력해주세요.\");return;}// 이름 정규식 \nif(!nameRegex.test(memberName)){alert(\"이름을 올바른 형식으로 입력해주세요.\");return;}fetch(\"/memberId-Find\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"},body:JSON.stringify({memberName,memberBirth,memberPhone})}).then(response=>{console.log(response);console.log(\"response : \",response.status);if(!response.ok){throw new Error(\"서버 응답이 실패하였습니다.\");}return response.json();}).then(data=>{console.log(data);// if (data && data.memberId) {\nif(data){setUserInfo(data);alert(\"입력하신 정보와 일치하는 아이디를 찾았습니다.\");setChange(true);}else{alert(\"일치하는 정보가 없습니다.\");}}).catch(error=>{console.error(\"Fetch error:\",error);alert(\"일치하는 정보가 없습니다.\");});};return/*#__PURE__*/_jsxs(\"div\",{className:\"grop\",children:[!change?/*#__PURE__*/_jsxs(\"div\",{className:\"title-box\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"\\uC544\\uC774\\uB514 \\uCC3E\\uAE30\"}),/*#__PURE__*/_jsx(\"h6\",{children:\"\\uC544\\uC774\\uB514\\uAC00 \\uAE30\\uC5B5\\uB098\\uC9C0 \\uC54A\\uC73C\\uC138\\uC694? \\uC6D0\\uD558\\uC2DC\\uB294 \\uBC29\\uBC95\\uC744 \\uC120\\uD0DD\\uD574 \\uC544\\uC774\\uB514\\uB97C  \\uD655\\uC778\\uD558\\uC2E4 \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4.\"})]}):/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{className:\"input-value\",children:/*#__PURE__*/_jsx(\"h1\",{children:\"\\uC544\\uC774\\uB514 \\uD655\\uC778\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"input-value\",children:/*#__PURE__*/_jsx(\"h6\",{children:\"\\uC785\\uB825\\uD558\\uC2E0 \\uC815\\uBCF4\\uC640 \\uC77C\\uCE58\\uD558\\uB294 \\uC544\\uC774\\uB514\\uB294 \\uB2E4\\uC74C\\uACFC \\uAC19\\uC2B5\\uB2C8\\uB2E4.\"})})]}),!change?/*#__PURE__*/_jsxs(\"div\",{className:\"login-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"input-value\",children:/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:memberName,onChange:nameHandleChange,placeholder:\"\\uC774\\uB984\\uC744 \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\",required:true})}),memberName&&/*#__PURE__*/_jsx(\"p\",{style:{color:nameRegex.test(memberName)?\"green\":\"red\",margin:\"0\",fontSize:\"13px\"},children:inputType===\"korean\"?nameRegex.test(memberName)?\"올바른 형식입니다.\":\"한글 1 ~ 6 글자 입력해주세요. *) 자음, 모음만 사용할 수 없습니다.\":inputType===\"english\"?nameRegex.test(memberName)?\"올바른 형식입니다.\":\"영어 5 ~ 15 글자 입력해주세요.\":\"언어: 한글 / 영어\"}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:memberBirth,onChange:birthHandleChange,placeholder:\"\\uC8FC\\uBBFC\\uBC88\\uD638 7\\uC790\\uB9AC\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694 / (-) \\uC790\\uB3D9 \\uC0DD\\uC131\",required:true,maxLength:\"8\"// 하이픈 포함 최대 8자리\n}),memberBirth&&/*#__PURE__*/_jsx(\"p\",{style:{color:birthRegex.test(memberBirth)&&isDateValid(memberBirth)?\"green\":\"red\",margin:\"0\",fontSize:\"13px\"},children:birthRegex.test(memberBirth)&&isDateValid(memberBirth)?`올바른 형식입니다.`:\"형식이 올바르지 않습니다.\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"input-value\",children:/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:memberPhone,onChange:phoneHandleChange,placeholder:\"\\uC804\\uD654\\uBC88\\uD638\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\",required:true})}),memberPhone&&/*#__PURE__*/_jsx(\"p\",{style:{color:phoneRegex.test(memberPhone)?\"green\":\"red\",margin:\"0\",fontSize:\"13px\"},children:phoneRegex.test(memberPhone)?\"올바른 형식입니다.\":\"전화번호 010-****-****\"}),/*#__PURE__*/_jsx(\"div\",{className:\"input-value\",children:/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-dark\",onClick:idFind,children:\"\\uC544\\uC774\\uB514 \\uCC3E\\uAE30\"})})]}):/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"div\",{className:\"login-container\",children:[/*#__PURE__*/_jsxs(\"h2\",{children:[userInfo.memberName,\" \\uB2D8\\uC758 \\uC544\\uC774\\uB514\\uB294 \",userInfo.memberId,\" \\uC785\\uB2C8\\uB2E4.\"]}),/*#__PURE__*/_jsx(\"div\",{className:\"input-value\"}),/*#__PURE__*/_jsx(\"div\",{className:\"input-value\",children:/*#__PURE__*/_jsx(Link,{to:\"/memberLogin\",children:/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-dark\",children:\"\\uB85C\\uADF8\\uC778\"})})}),/*#__PURE__*/_jsx(\"div\",{className:\"input-value\",children:/*#__PURE__*/_jsx(Link,{to:\"/passwordFind\",children:/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-dark\",children:\"\\uBE44\\uBC00\\uBC88\\uD638 \\uCC3E\\uAE30\"})})})]})})]});};export default MemberIdFind;","map":{"version":3,"names":["React","useState","Link","jsx","_jsx","jsxs","_jsxs","MemberIdFind","memberName","setMemberName","memberBirth","setMemberBirth","memberPhone","setMemberPhone","change","setChange","userInfo","setUserInfo","inputType","setInputType","nameRegex","birthRegex","phoneRegex","nameHandleChange","e","value","target","firstChar","charAt","test","formatPhoneNumber","cleanedPhone","replace","length","slice","phoneHandleChange","formattedPhoneNumber","isDateValid","birthDate","datePart","genderPart","split","yy","parseInt","mm","dd","year","daysInMonth","Date","getDate","birthHandleChange","idFind","alert","trim","fetch","method","headers","body","JSON","stringify","then","response","console","log","status","ok","Error","json","data","catch","error","className","children","type","onChange","placeholder","required","style","color","margin","fontSize","maxLength","onClick","memberId","to"],"sources":["C:/Users/user1/Desktop/sixsence/Sixsence/src/main/sixsence-front/src/login/MemberIdFind.js"],"sourcesContent":["import React, {useState} from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst MemberIdFind = () => {\r\n\r\n    const [memberName, setMemberName] = useState(\"\");\r\n    const [memberBirth, setMemberBirth] = useState(\"\");\r\n    const [memberPhone, setMemberPhone] = useState(\"\");\r\n\r\n    const [change, setChange] = useState(false);\r\n    const [userInfo, setUserInfo] = useState(null);\r\n    const [inputType, setInputType] = useState(\"none\");\r\n    // 정규식 \r\n    const nameRegex = /^[가-힣]{1,6}$|^[a-zA-Z\\s\\-]{5,15}$/;\r\n    const birthRegex = /^\\d{6}-[1-4]$/;\r\n    const phoneRegex = /^(01[016789])[-\\s]?\\d{3,4}[-\\s]?\\d{4}$/;\r\n\r\n\r\n        // 이름 핸들러\r\n        const nameHandleChange = (e) => {\r\n        const value = e.target.value;\r\n        const firstChar = value.charAt(0);\r\n        // 첫 번째 문자에 따라 입력 타입 설정\r\n        if (/^[ㄱ-힇]$/.test(firstChar)) {\r\n            setInputType(\"korean\");\r\n        } else if (/^[a-zA-Z]$/.test(firstChar)) {\r\n            setInputType(\"english\");\r\n        }\r\n\r\n        // 입력 타입에 맞게 값 필터링\r\n        if (inputType === \"korean\" && /^[ㄱ-힣]*$/.test(value)) {\r\n            setMemberName(value);\r\n        } else if (inputType === \"english\" && /^[a-zA-Z]*$/.test(value)) {\r\n            setMemberName(value);\r\n        } else if (inputType === \"none\") {\r\n            setMemberName(value);  // 입력 타입이 설정되지 않은 경우에는 입력을 허용합니다.\r\n        }\r\n    };\r\n\r\n       // *****************************************전화번호 형식 ********************************************\r\n       const formatPhoneNumber = (value) => {\r\n        const cleanedPhone = value.replace(/\\D/g, '');\r\n        \r\n        if (cleanedPhone.length <= 3) {\r\n            return cleanedPhone;\r\n        }\r\n        if (cleanedPhone.length <= 7) {\r\n            return `${cleanedPhone.slice(0, 3)}-${cleanedPhone.slice(3)}`;\r\n        }\r\n        return `${cleanedPhone.slice(0, 3)}-${cleanedPhone.slice(3, 7)}-${cleanedPhone.slice(7, 11)}`;\r\n    };\r\n\r\n    // 전화번호 핸들러\r\n    const phoneHandleChange = (e) => {\r\n        const formattedPhoneNumber = formatPhoneNumber(e.target.value);\r\n        setMemberPhone(formattedPhoneNumber);\r\n    };\r\n    // *******************************************************************************************************\r\n\r\n   //---------------------------------------------주민번호 날짜 관련 정규식 부가적인 요소------------------------------------------------\r\n// 날짜 유효성 검사 함수\r\nconst isDateValid = (birthDate) => {\r\n    const [datePart, genderPart] = birthDate.split('-');\r\n    \r\n    // 날짜 부분이 올바른지 확인\r\n    if (datePart.length !== 6 || !/^\\d{6}$/.test(datePart) || !/^[1-4]$/.test(genderPart)) {\r\n        return false;\r\n    }\r\n    \r\n    // 연도, 월, 일 추출\r\n    const yy = parseInt(datePart.slice(0, 2), 10);\r\n    const mm = parseInt(datePart.slice(2, 4), 10);\r\n    const dd = parseInt(datePart.slice(4, 6), 10);\r\n    \r\n    // YY를 YYYY로 변환\r\n    const year = yy >= 0 && yy <= 99 ? (yy < 30 ? 2000 + yy : 1900 + yy) : yy;\r\n    \r\n    // 월과 일 유효성 검사\r\n    if (mm < 1 || mm > 12) return false; // 월이 1~12 사이인지 확인\r\n    \r\n    // 월에 따라 일자 유효성 검사\r\n    const daysInMonth = new Date(year, mm, 0).getDate();\r\n    if (dd < 1 || dd > daysInMonth) return false; // 일자가 월의 일수 범위 내인지 확인\r\n    \r\n    return true;\r\n};\r\n // 입력값 처리 함수\r\n const birthHandleChange = (e) => {\r\n    let value = e.target.value;\r\n    \r\n    // 숫자만 허용\r\n    value = value.replace(/[^\\d]/g, '');\r\n    \r\n    // 하이픈 추가\r\n    if (value.length > 6) {\r\n        value = value.slice(0, 6) + '-' + value.slice(6, 7);\r\n    }\r\n    \r\n    setMemberBirth(value);\r\n}\r\n\r\n    const idFind = () => {\r\n\r\n       \r\n\r\n        // 정규식 이름 생년월일 전화번호 정의\r\n        if (!nameRegex.test(memberName)) {\r\n            alert(\"이름 형식을 올바르게 입력해주세요.\");\r\n            return;\r\n        }\r\n         // 주민번호 정규식 \r\n         if (!birthRegex.test(memberBirth)) {\r\n            alert(\"생년월일 형식을 올바르게 입력해주세요. (oooooo-o)\");\r\n            return;\r\n        }\r\n        // 전화번호 공백 불가\r\n        if(!memberPhone){\r\n            alert(\"전화번호를 입력해주세요.\");\r\n            return;\r\n        }\r\n        // 전화번호 정규식 \r\n        if (!phoneRegex.test(memberPhone)) {\r\n            alert(\"전화번호를 올바른 형식으로 입력해주세요.\");\r\n            return;\r\n        }\r\n        // 이름 공백 불가\r\n        if(!memberName.trim()){\r\n            alert(\"이름을 입력해주세요.\");\r\n            return;\r\n        }\r\n        // 이름 정규식 \r\n        if (!nameRegex.test(memberName)) {\r\n            alert(\"이름을 올바른 형식으로 입력해주세요.\");\r\n            return;\r\n        }\r\n\r\n\r\n        fetch(\"/memberId-Find\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Accept\": \"application/json\"\r\n            },\r\n            body: JSON.stringify({ memberName, memberBirth, memberPhone })\r\n        })\r\n        .then(response => {\r\n            console.log(response);\r\n            console.log(\"response : \" , response.status);\r\n            if (!response.ok) {\r\n                throw new Error(\"서버 응답이 실패하였습니다.\");\r\n            }\r\n            return response.json();\r\n        })\r\n        .then(data => {\r\n            console.log(data);\r\n            // if (data && data.memberId) {\r\n            if (data){\r\n                setUserInfo(data);\r\n                alert(\"입력하신 정보와 일치하는 아이디를 찾았습니다.\");\r\n                setChange(true);\r\n            } else {\r\n                alert(\"일치하는 정보가 없습니다.\");\r\n            }\r\n        })\r\n        .catch(error => {\r\n            console.error(\"Fetch error:\", error);\r\n            alert(\"일치하는 정보가 없습니다.\");\r\n        });\r\n    };\r\n\r\n\r\n    return (\r\n        <div className='grop'>\r\n        {!change ? (\r\n            <div className=\"title-box\">\r\n\r\n            <h1>아이디 찾기</h1>\r\n           \r\n            <h6>아이디가 기억나지 않으세요? 원하시는 방법을 선택해 아이디를  확인하실 수 있습니다.</h6>\r\n           \r\n            </div>\r\n        ) : (\r\n        <div>\r\n\r\n        <div className='input-value'>\r\n        <h1>아이디 확인</h1>\r\n        </div>\r\n        \r\n        <div className='input-value'>\r\n        <h6>입력하신 정보와 일치하는 아이디는 다음과 같습니다.</h6>\r\n        </div>\r\n        </div>\r\n        )}\r\n        \r\n\r\n        {!change ? (\r\n            <div className='login-container'>\r\n\r\n            {/*-------------------------------------------------------------------------- 이름 --------------------------------------------------------------------------*/}\r\n        <div className=\"input-value\">\r\n            <input type=\"text\" value={memberName} \r\n            onChange={nameHandleChange} placeholder=\"이름을 입력해주세요.\" required/>\r\n        </div>\r\n        {memberName && (\r\n        <p style={{\r\n                color: nameRegex.test(memberName) ? \"green\" : \"red\",\r\n                margin: \"0\",\r\n                fontSize: \"13px\"}}>\r\n                {inputType === \"korean\"\r\n                    ? nameRegex.test(memberName)\r\n                        ? \"올바른 형식입니다.\"\r\n                        : \"한글 1 ~ 6 글자 입력해주세요. *) 자음, 모음만 사용할 수 없습니다.\"\r\n                    : inputType === \"english\"\r\n                    ? nameRegex.test(memberName)\r\n                        ? \"올바른 형식입니다.\"\r\n                        : \"영어 5 ~ 15 글자 입력해주세요.\"\r\n                    : \"언어: 한글 / 영어\"}\r\n        </p>\r\n    )}\r\n     {/*---------------------------------------------------------------------------------------------------------------------------------------------------------------*/}\r\n\r\n            {/* ******************************************************************** 주민번호 ************************************************************************** */}\r\n            <div>\r\n            <input\r\n                type=\"text\"\r\n                value={memberBirth}\r\n                onChange={birthHandleChange}\r\n                placeholder=\"주민번호 7자리를 입력해주세요 / (-) 자동 생성\"\r\n                required\r\n                maxLength=\"8\" // 하이픈 포함 최대 8자리\r\n            />\r\n            {memberBirth && (\r\n                <p style={{ color: (birthRegex.test(memberBirth) && isDateValid(memberBirth)) ? \"green\" : \"red\", margin: \"0\", fontSize: \"13px\" }}>\r\n                    {birthRegex.test(memberBirth) && isDateValid(memberBirth) ? \r\n                        `올바른 형식입니다.` : \r\n                        \"형식이 올바르지 않습니다.\"}\r\n                </p>\r\n            )}\r\n        </div>\r\n    {/* ****************************************************************************************************************************************************************** */}\r\n            \r\n            {/*----------------------------------------------------------------------------전화번호-----------------------------------------------------------------------------------------*/}\r\n        <div className=\"input-value\">\r\n            <input type=\"text\" value={memberPhone} \r\n            onChange={phoneHandleChange} \r\n            placeholder=\"전화번호를 입력해주세요.\" required\r\n            />\r\n        </div>\r\n        {memberPhone && (\r\n                <p\r\n                    style={{\r\n                        color: phoneRegex.test(memberPhone) ? \"green\" : \"red\",\r\n                        margin: \"0\",\r\n                        fontSize: \"13px\"\r\n                    }}\r\n                >\r\n                    {phoneRegex.test(memberPhone)\r\n                        ? \"올바른 형식입니다.\"\r\n                        : \"전화번호 010-****-****\"}\r\n                </p>\r\n            )}\r\n    {/*--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/}\r\n    \r\n            <div className=\"input-value\">\r\n            <button className=\"btn btn-dark\" onClick={idFind}>아이디 찾기</button>\r\n            </div>\r\n              \r\n            </div>\r\n    \r\n        ) : (\r\n            <div>\r\n        <div className='login-container'>\r\n        <h2>{userInfo.memberName} 님의 아이디는 {userInfo.memberId} 입니다.</h2>\r\n        <div className=\"input-value\">\r\n       \r\n        </div>\r\n\r\n        <div className=\"input-value\">\r\n        <Link to=\"/memberLogin\"><button className=\"btn btn-dark\">로그인</button></Link>\r\n        </div>\r\n\r\n        <div className=\"input-value\">\r\n        <Link to=\"/passwordFind\"><button className=\"btn btn-dark\">비밀번호 찾기</button></Link>\r\n        </div>\r\n        \r\n        </div>\r\n        </div>\r\n        )}\r\n        \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MemberIdFind;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}