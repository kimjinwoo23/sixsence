{"ast":null,"code":"import React,{useState}from\"react\";import{useNavigate,useLocation}from\"react-router-dom\";import AddressSearch from\"./AddressSearch\";import axios from\"axios\";import\"../css/Google.css\";import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const GoogleSignUp=()=>{const[memberId,setMemberId]=useState(\"\");const[memberPw,setMemberPw]=useState(\"\");const[memberPwCheck,setMemberPwCheck]=useState(\"\");const[memberAge,setMemberAge]=useState(\"\");const[memberGender,setMemberGender]=useState(\"\");const[memberBirth,setMemberBirth]=useState(\"\");const[memberAddress,setMemberAddress]=useState(\"\");const[memberPhone,setMemberPhone]=useState(\"\");const[emailPlug,setEmailPlug]=useState(null);const navigate=useNavigate();// useNavigate 훅 호출\nconst location=useLocation();const data=location.state;// 전달된 상태를 가져옵니다.\nconsole.log(\"data : \",data);// 정규식\nconst idRegex=/^[a-zA-Z0-9]{8,15}$/;const passwordRegex=/^(?=.*[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z0-9!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]{10,15}$/;const phoneRegex=/^(01[016789])[-\\s]?\\d{3,4}[-\\s]?\\d{4}$/;const birthRegex=/^\\d{6}-[1-4]$/;const consonantVowelRegex=/^[ㄱ-ㅎㅏ-ㅣ]+$/;/* 이메일 중복 검사 */axios.post(\"/memberEmailCheck?email=\"+data.email).then(response=>{if(Number(response.data)==!0){setEmailPlug(true);}else{setEmailPlug(false);}}).catch(err=>{alert(\"Error : \"+err);});// ID 중복 검사 변수\nconst[memberIdValidation,setMemberIdValidation]=useState(false);// 주소 핸들러\nconst handleAddressChange=address=>{setMemberAddress(address);};// 비밀번호 입력시 <p> 태그 활용하기 위해서 \nconst isPasswordValid=passwordRegex.test(memberPw)&&passwordRegex.test(memberPwCheck);const arePasswordsMatching=memberPw===memberPwCheck;const isInputFilled=memberPw&&memberPwCheck;// *****************************************전화번호 형식 ********************************************\nconst formatPhoneNumber=value=>{const cleanedPhone=value.replace(/\\D/g,'');if(cleanedPhone.length<=3){return cleanedPhone;}if(cleanedPhone.length<=7){return`${cleanedPhone.slice(0,3)}-${cleanedPhone.slice(3)}`;}return`${cleanedPhone.slice(0,3)}-${cleanedPhone.slice(3,7)}-${cleanedPhone.slice(7,11)}`;};// 전화번호 핸들러\nconst phoneHandleChange=e=>{const formattedPhoneNumber=formatPhoneNumber(e.target.value);setMemberPhone(formattedPhoneNumber);};// *******************************************************************************************************\n//---------------------------------------------주민번호 날짜 관련 정규식 부가적인 요소------------------------------------------------\n// 날짜 유효성 검사 함수\nconst isDateValid=birthDate=>{const[datePart,genderPart]=birthDate.split('-');// 날짜 부분이 올바른지 확인\nif(datePart.length!==6||!/^\\d{6}$/.test(datePart)||!/^[1-4]$/.test(genderPart)){return false;}// 연도, 월, 일 추출\nconst yy=parseInt(datePart.slice(0,2),10);const mm=parseInt(datePart.slice(2,4),10);const dd=parseInt(datePart.slice(4,6),10);// YY를 YYYY로 변환\nconst year=yy>=0&&yy<=99?yy<30?2000+yy:1900+yy:yy;// 월과 일 유효성 검사\nif(mm<1||mm>12)return false;// 월이 1~12 사이인지 확인\n// 월에 따라 일자 유효성 검사\nconst daysInMonth=new Date(year,mm,0).getDate();if(dd<1||dd>daysInMonth)return false;// 일자가 월의 일수 범위 내인지 확인\nreturn true;};// ----------------------------------------------------------------------------------------------------------------------------------------\n//*************************************** 나이 계산 함수 *******************************************\nconst calculateAge=birthDate=>{const[year,month,day]=[birthDate.slice(0,4),birthDate.slice(4,6),birthDate.slice(6,8)];const birthYear=parseInt(year,10);const currentYear=new Date().getFullYear();const age=currentYear-birthYear;return age;};// -------------------------------------- 성별 추출 함수 ----------------------------------------------\nconst getGender=genderCode=>{switch(genderCode){case'1':case'3':return'Male';// 1900년대 남성 또는 2000년대 남성\ncase'2':case'4':return'Female';// 1900년대 여성 또는 2000년대 여성\ndefault:return'Unknown';}};// 입력값 처리 함수\nconst birthHandleChange=e=>{let value=e.target.value;// 숫자만 허용\nvalue=value.replace(/[^\\d]/g,'');// 하이픈 추가\nif(value.length>6){value=value.slice(0,6)+'-'+value.slice(6,7);}setMemberBirth(value);// 주민등록번호가 올바른 형식일 경우에만 나이와 성별 계산\nif(/^\\d{6}-[1-4]$/.test(value)){const[datePart,genderPart]=value.split('-');const yearPrefix=genderPart==='1'||genderPart==='2'?'19':'20';const fullDate=yearPrefix+datePart;const age=calculateAge(fullDate);const gender=getGender(genderPart);setMemberAge(age);setMemberGender(gender);}else{setMemberAge('');setMemberGender('');}};// ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n/* ----------------------------------아이디를 입력했을 때 그 값이 DB에 중복된 값이 없는지 미리 확인하고 true false 반환하여 중복 여부 확인 버튼에서 사용 ---------------------------------------------*/const memberIdCheck=inputId=>{// inputId : 현재 입력한 ID 대입\nsetMemberId(inputId);// 비동기로 아이디 중복 검사 수행\nfetch(\"memberIdCheck?id=\"+inputId)// url 주소로 이동할 때 inputId 값을 들고 가서 비교하겠다.\n.then(resp=>resp.text()).then(result=>{// 중복이 아닐 때 true, 중복이면 false\nif(Number(result)===0)setMemberIdValidation(true);else setMemberIdValidation(false);});};// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n// ****************************************************************** 아이디 중복 검사 버튼 및 아이디 정규식 모음 ************************************************************************\nconst duplicationIdCheck=()=>{if(!memberId.trim()){alert(\"아이디를 입력해주세요.\");return;}if(consonantVowelRegex.test(memberId)){alert(\"올바른 형식으로 입력해주세요.\");setMemberIdValidation(false);return;}if(memberId.length<8||memberId.length>15){alert(\"올바르지 않은 형식입니다.\");return;}if(memberIdValidation){alert(\"사용 가능한 아이디입니다.\");}else{alert(\"중복 되는 아이디가 존재합니다.\");return;}};const MemberSignUpButton=()=>{//아이디가 유효하지 않을 때 \nif(!memberIdValidation){alert(\"아이디 중복 검사를 확인 해주세요. \");return;}// 비밀번호 공백 불가\nif(!memberPw||!memberPwCheck){alert(\"비밀번호를 입력해주세요.\");return;}// 비밀번호가 불일치\nif(memberPw!==memberPwCheck){alert(\"비밀번호가 일치하지 않습니다.\");return;}// 비밀번호 정규식\nif(!passwordRegex.test(memberPw)||!passwordRegex.test(memberPwCheck)){alert(\"비밀번호를 올바른 형식으로 입력해주세요.\");return;}// 주민번호 공백 불가\nif(!memberBirth.trim()){alert(\"생년월일을 입력해주세요.\");return;}// 주민번호 정규식 \nif(!birthRegex.test(memberBirth)){alert(\"생년월일 형식을 올바르게 입력해주세요. (oooooo-o)\");return;}// 전화번호 공백 불가\nif(!memberPhone){alert(\"전화번호를 입력해주세요.\");return;}// 전화번호 정규식 \nif(!phoneRegex.test(memberPhone)){alert(\"전화번호를 올바른 형식으로 입력해주세요.\");return;}// **************************************************************   사용자 입력 정보의 집합   ***********************************************************************\nconst memberInputInfo={};memberInputInfo.memberId=memberId;memberInputInfo.memberPw=memberPw;memberInputInfo.memberPwCheck=memberPwCheck;memberInputInfo.memberName=data.name;memberInputInfo.memberAge=memberAge;memberInputInfo.memberGender=memberGender;memberInputInfo.memberBirth=memberBirth;memberInputInfo.memberEmail=data.email;memberInputInfo.memberAddress=memberAddress;memberInputInfo.memberPhone=memberPhone;/*********************************************************************************************************************************************************************/// ****************************************************************** 회원 가입 INPUT 정보 Controller 로 보내는 Fetch ***********************************************************************      \nfetch(\"/memberSignUp\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify(memberInputInfo)}).then(response=>response.text()).then(result=>{if(Number(result)>0){alert(\"회원 가입이 완료되었습니다.\");setMemberId(\"\");setMemberPw(\"\");setMemberPwCheck(\"\");setMemberAge(\"\");setMemberGender(\"\");setMemberBirth(\"\");setMemberAddress(\"\");setMemberPhone(\"\");navigate('/');}else{alert(\"회원 가입이 실패하였습니다.\");}});};return/*#__PURE__*/_jsx(\"div\",{className:\"login-container\",children:emailPlug?/*#__PURE__*/_jsx(\"div\",{className:\"login-check-container\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"login-check-card\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"login-check-heading\",children:\"\\uD68C\\uC6D0 \\uC815\\uBCF4 \\uD655\\uC778\"}),/*#__PURE__*/_jsxs(\"p\",{className:\"login-check-message\",children:[data.name,\" \\uB2D8 \\uC548\\uB155\\uD558\\uC138\\uC694!\"]}),/*#__PURE__*/_jsxs(\"p\",{className:\"login-check-message\",children:[\"\\uAC00\\uC785\\uB41C \\uC774\\uBA54\\uC77C : \",data.email]}),/*#__PURE__*/_jsx(\"p\",{className:\"login-check-instruction\",children:\"\\uAC00\\uC785 \\uC5EC\\uBD80 \\uD655\\uC778 \\uD398\\uC774\\uC9C0\\uB85C \\uC774\\uB3D9\\uD558\\uC2DC\\uAC70\\uB098 \\uD648\\uC73C\\uB85C \\uB3CC\\uC544\\uAC00\\uC138\\uC694.\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"login-check-button-group\",children:[/*#__PURE__*/_jsx(\"a\",{href:\"/registerCheck\",className:\"login-check-btn\",children:\"\\uAC00\\uC785 \\uC5EC\\uBD80 \\uD655\\uC778\"}),/*#__PURE__*/_jsx(\"a\",{href:\"/\",className:\"login-check-btn login-check-home-btn\",children:\"Home\"})]})]})}):/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"\\uD68C\\uC6D0\\uAC00\\uC785\"}),/*#__PURE__*/_jsx(\"div\",{className:\"input-value\",children:/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:memberId,className:memberIdValidation?\"\":\"memberId-error\",onChange:e=>{memberIdCheck(e.target.value);},placeholder:\"\\uC544\\uC774\\uB514\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\",required:true})}),memberId&&(idRegex.test(memberId)?/*#__PURE__*/_jsx(\"p\",{style:{color:\"green\",margin:\"0\",fontSize:\"13px\"},children:\"\\uC62C\\uBC14\\uB978 \\uD615\\uC2DD\\uC785\\uB2C8\\uB2E4.\"}):/*#__PURE__*/_jsx(\"p\",{style:{color:\"red\",margin:\"0\",fontSize:\"13px\"},children:\"8 ~ 15 \\uC790 \\uC601\\uBB38 \\uB610\\uB294 \\uC22B\\uC790\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\"})),/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-dark\",onClick:duplicationIdCheck,children:\"\\uC544\\uC774\\uB514 \\uC911\\uBCF5 \\uD655\\uC778\"}),/*#__PURE__*/_jsx(\"div\",{className:\"input-value\",children:/*#__PURE__*/_jsx(\"input\",{type:\"password\",value:memberPw,onChange:e=>setMemberPw(e.target.value),placeholder:\"\\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\",required:true})}),/*#__PURE__*/_jsx(\"div\",{className:\"input-value\",children:/*#__PURE__*/_jsx(\"input\",{type:\"password\",value:memberPwCheck,onChange:e=>setMemberPwCheck(e.target.value),placeholder:\"\\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uC7AC \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\",required:true})}),isInputFilled&&/*#__PURE__*/_jsx(_Fragment,{children:isPasswordValid&&arePasswordsMatching?/*#__PURE__*/_jsx(\"p\",{style:{color:\"green\",margin:\"0\",fontSize:\"13px\"},children:\"\\uBE44\\uBC00\\uBC88\\uD638\\uAC00 \\uC77C\\uCE58\\uD569\\uB2C8\\uB2E4.\"}):/*#__PURE__*/_jsxs(_Fragment,{children:[!arePasswordsMatching&&/*#__PURE__*/_jsx(\"p\",{style:{color:\"red\",margin:\"0\",fontSize:\"13px\"},children:\"\\uBE44\\uBC00\\uBC88\\uD638\\uAC00 \\uC77C\\uCE58\\uD558\\uC9C0 \\uC54A\\uC2B5\\uB2C8\\uB2E4.\"}),!isPasswordValid&&/*#__PURE__*/_jsx(\"p\",{style:{color:\"red\",margin:\"0\",fontSize:\"13px\"},children:\"\\uBE44\\uBC00\\uBC88\\uD638\\uB294 10 ~ 15 \\uC790, \\uD2B9\\uC218\\uBB38\\uC790\\uB97C \\uD3EC\\uD568\\uD574\\uC57C \\uD569\\uB2C8\\uB2E4.\"})]})}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:memberBirth,onChange:birthHandleChange,placeholder:\"\\uC8FC\\uBBFC\\uBC88\\uD638 7\\uC790\\uB9AC\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694 / (-) \\uC790\\uB3D9 \\uC0DD\\uC131\",required:true,maxLength:\"8\"// 하이픈 포함 최대 8자리\n}),memberBirth&&/*#__PURE__*/_jsx(\"p\",{style:{color:birthRegex.test(memberBirth)&&isDateValid(memberBirth)?\"green\":\"red\",margin:\"0\",fontSize:\"13px\"},children:birthRegex.test(memberBirth)&&isDateValid(memberBirth)?`올바른 형식입니다.`:\"형식이 올바르지 않습니다.\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"input-value\",children:/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:memberPhone,onChange:phoneHandleChange,placeholder:\"\\uC804\\uD654\\uBC88\\uD638\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\",required:true})}),memberPhone&&/*#__PURE__*/_jsx(\"p\",{style:{color:phoneRegex.test(memberPhone)?\"green\":\"red\",margin:\"0\",fontSize:\"13px\"},children:phoneRegex.test(memberPhone)?\"올바른 형식입니다.\":\"전화번호 010-****-****\"}),/*#__PURE__*/_jsx(\"div\",{className:\"input-value\",children:/*#__PURE__*/_jsx(AddressSearch,{onAddressChange:handleAddressChange})}),/*#__PURE__*/_jsx(\"div\",{className:\"input-value\",children:/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"btn btn-dark\",onClick:MemberSignUpButton,children:\"\\uD68C\\uC6D0\\uAC00\\uC785\"})})]})});};export default GoogleSignUp;","map":{"version":3,"names":["React","useState","useNavigate","useLocation","AddressSearch","axios","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","GoogleSignUp","memberId","setMemberId","memberPw","setMemberPw","memberPwCheck","setMemberPwCheck","memberAge","setMemberAge","memberGender","setMemberGender","memberBirth","setMemberBirth","memberAddress","setMemberAddress","memberPhone","setMemberPhone","emailPlug","setEmailPlug","navigate","location","data","state","console","log","idRegex","passwordRegex","phoneRegex","birthRegex","consonantVowelRegex","post","email","then","response","Number","catch","err","alert","memberIdValidation","setMemberIdValidation","handleAddressChange","address","isPasswordValid","test","arePasswordsMatching","isInputFilled","formatPhoneNumber","value","cleanedPhone","replace","length","slice","phoneHandleChange","e","formattedPhoneNumber","target","isDateValid","birthDate","datePart","genderPart","split","yy","parseInt","mm","dd","year","daysInMonth","Date","getDate","calculateAge","month","day","birthYear","currentYear","getFullYear","age","getGender","genderCode","birthHandleChange","yearPrefix","fullDate","gender","memberIdCheck","inputId","fetch","resp","text","result","duplicationIdCheck","trim","MemberSignUpButton","memberInputInfo","memberName","name","memberEmail","method","headers","body","JSON","stringify","className","children","href","type","onChange","placeholder","required","style","color","margin","fontSize","onClick","maxLength","onAddressChange"],"sources":["C:/Users/user1/Desktop/sixsence/Sixsence/src/main/sixsence-front/src/login/GoogleSignUp.js"],"sourcesContent":["import React, {useState} from \"react\";\r\nimport { useNavigate, useLocation  } from \"react-router-dom\";\r\nimport AddressSearch from \"./AddressSearch\";\r\nimport axios from \"axios\";\r\nimport \"../css/Google.css\";\r\n\r\nconst GoogleSignUp = () => {\r\n\r\n    const [memberId, setMemberId] = useState(\"\");\r\n    const [memberPw, setMemberPw] = useState(\"\");\r\n    const [memberPwCheck, setMemberPwCheck] = useState(\"\");\r\n    const [memberAge, setMemberAge] = useState(\"\");\r\n    const [memberGender, setMemberGender] = useState(\"\");\r\n    const [memberBirth, setMemberBirth] = useState(\"\");\r\n    const [memberAddress, setMemberAddress] = useState(\"\");\r\n    const [memberPhone, setMemberPhone] = useState(\"\");\r\n    const [emailPlug, setEmailPlug] = useState(null);\r\n\r\n    const navigate = useNavigate(); // useNavigate 훅 호출\r\n    \r\n    const location = useLocation();\r\n    const data = location.state;  // 전달된 상태를 가져옵니다.\r\n    console.log(\"data : \", data);\r\n    // 정규식\r\n    const idRegex = /^[a-zA-Z0-9]{8,15}$/ \r\n    const passwordRegex = /^(?=.*[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z0-9!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]{10,15}$/;\r\n    const phoneRegex = /^(01[016789])[-\\s]?\\d{3,4}[-\\s]?\\d{4}$/;\r\n    const birthRegex = /^\\d{6}-[1-4]$/;\r\n    const consonantVowelRegex = /^[ㄱ-ㅎㅏ-ㅣ]+$/;     \r\n    \r\n    /* 이메일 중복 검사 */\r\n    axios.post(\"/memberEmailCheck?email=\" + data.email)\r\n    .then(response => {\r\n        if(Number(response.data) ==! 0){\r\n            setEmailPlug(true);\r\n        } else {\r\n            setEmailPlug(false);\r\n        }\r\n    })\r\n    .catch(err => {\r\n        alert(\"Error : \" + err);\r\n    })\r\n\r\n    // ID 중복 검사 변수\r\n    const [memberIdValidation, setMemberIdValidation] = useState(false);\r\n    \r\n    // 주소 핸들러\r\n    const handleAddressChange = (address) => {\r\n        setMemberAddress(address);\r\n      };\r\n      \r\n    // 비밀번호 입력시 <p> 태그 활용하기 위해서 \r\n    const isPasswordValid = passwordRegex.test(memberPw) && passwordRegex.test(memberPwCheck);\r\n    const arePasswordsMatching = memberPw === memberPwCheck;\r\n    const isInputFilled = memberPw && memberPwCheck;\r\n\r\n    // *****************************************전화번호 형식 ********************************************\r\n    const formatPhoneNumber = (value) => {\r\n        const cleanedPhone = value.replace(/\\D/g, '');\r\n        \r\n        if (cleanedPhone.length <= 3) {\r\n            return cleanedPhone;\r\n        }\r\n        if (cleanedPhone.length <= 7) {\r\n            return `${cleanedPhone.slice(0, 3)}-${cleanedPhone.slice(3)}`;\r\n        }\r\n        return `${cleanedPhone.slice(0, 3)}-${cleanedPhone.slice(3, 7)}-${cleanedPhone.slice(7, 11)}`;\r\n    };\r\n\r\n    // 전화번호 핸들러\r\n    const phoneHandleChange = (e) => {\r\n        const formattedPhoneNumber = formatPhoneNumber(e.target.value);\r\n        setMemberPhone(formattedPhoneNumber);\r\n    };\r\n    // *******************************************************************************************************\r\n//---------------------------------------------주민번호 날짜 관련 정규식 부가적인 요소------------------------------------------------\r\n// 날짜 유효성 검사 함수\r\nconst isDateValid = (birthDate) => {\r\n    const [datePart, genderPart] = birthDate.split('-');\r\n    \r\n    // 날짜 부분이 올바른지 확인\r\n    if (datePart.length !== 6 || !/^\\d{6}$/.test(datePart) || !/^[1-4]$/.test(genderPart)) {\r\n        return false;\r\n    }\r\n    \r\n    // 연도, 월, 일 추출\r\n    const yy = parseInt(datePart.slice(0, 2), 10);\r\n    const mm = parseInt(datePart.slice(2, 4), 10);\r\n    const dd = parseInt(datePart.slice(4, 6), 10);\r\n    \r\n    // YY를 YYYY로 변환\r\n    const year = yy >= 0 && yy <= 99 ? (yy < 30 ? 2000 + yy : 1900 + yy) : yy;\r\n    \r\n    // 월과 일 유효성 검사\r\n    if (mm < 1 || mm > 12) return false; // 월이 1~12 사이인지 확인\r\n    \r\n    // 월에 따라 일자 유효성 검사\r\n    const daysInMonth = new Date(year, mm, 0).getDate();\r\n    if (dd < 1 || dd > daysInMonth) return false; // 일자가 월의 일수 범위 내인지 확인\r\n    \r\n    return true;\r\n};\r\n// ----------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n//*************************************** 나이 계산 함수 *******************************************\r\nconst calculateAge = (birthDate) => {\r\n    const [year, month, day] = [birthDate.slice(0, 4), birthDate.slice(4, 6), birthDate.slice(6, 8)];\r\n    const birthYear = parseInt(year, 10);\r\n    const currentYear = new Date().getFullYear();\r\n    const age = currentYear - birthYear;\r\n    return age;\r\n};\r\n\r\n// -------------------------------------- 성별 추출 함수 ----------------------------------------------\r\nconst getGender = (genderCode) => {\r\n    switch (genderCode) {\r\n        case '1': case '3':\r\n            return 'Male'; // 1900년대 남성 또는 2000년대 남성\r\n        case '2': case '4':\r\n            return 'Female'; // 1900년대 여성 또는 2000년대 여성\r\n        default:\r\n            return 'Unknown';\r\n    }\r\n};\r\n     // 입력값 처리 함수\r\n     const birthHandleChange = (e) => {\r\n        let value = e.target.value;\r\n        \r\n        // 숫자만 허용\r\n        value = value.replace(/[^\\d]/g, '');\r\n        \r\n        // 하이픈 추가\r\n        if (value.length > 6) {\r\n            value = value.slice(0, 6) + '-' + value.slice(6, 7);\r\n        }\r\n        \r\n        setMemberBirth(value);\r\n        \r\n        // 주민등록번호가 올바른 형식일 경우에만 나이와 성별 계산\r\n        if (/^\\d{6}-[1-4]$/.test(value)) {\r\n            const [datePart, genderPart] = value.split('-');\r\n            const yearPrefix = genderPart === '1' || genderPart === '2' ? '19' : '20';\r\n            const fullDate = yearPrefix + datePart;\r\n            const age = calculateAge(fullDate);\r\n            const gender = getGender(genderPart);\r\n            setMemberAge(age);\r\n            setMemberGender(gender);\r\n        } else {\r\n            setMemberAge('');\r\n            setMemberGender('');\r\n        }\r\n    };\r\n    \r\n  // ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n  \r\n    \r\n\r\n/* ----------------------------------아이디를 입력했을 때 그 값이 DB에 중복된 값이 없는지 미리 확인하고 true false 반환하여 중복 여부 확인 버튼에서 사용 ---------------------------------------------*/\r\n\r\n\r\n    const memberIdCheck = (inputId) => {\r\n    // inputId : 현재 입력한 ID 대입\r\n      setMemberId(inputId);\r\n    // 비동기로 아이디 중복 검사 수행\r\n    fetch(\"memberIdCheck?id=\" + inputId) // url 주소로 이동할 때 inputId 값을 들고 가서 비교하겠다.\r\n    .then(resp => resp.text())\r\n    .then(result => {\r\n\r\n      // 중복이 아닐 때 true, 중복이면 false\r\n      if(Number(result) === 0) \r\n        setMemberIdValidation(true);\r\n      else                     \r\n      setMemberIdValidation(false);\r\n    })\r\n  } \r\n  // -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n  // ****************************************************************** 아이디 중복 검사 버튼 및 아이디 정규식 모음 ************************************************************************\r\n    const duplicationIdCheck = () => { \r\n    if (!memberId.trim()) {\r\n        alert(\"아이디를 입력해주세요.\");\r\n        return;\r\n    } \r\n    if (consonantVowelRegex.test(memberId)) {\r\n        alert(\"올바른 형식으로 입력해주세요.\");\r\n        setMemberIdValidation(false);\r\n        return;\r\n    }\r\n    if(memberId.length < 8 || memberId.length > 15){\r\n        alert(\"올바르지 않은 형식입니다.\");\r\n        return;\r\n    }    \r\n    if(memberIdValidation){\r\n        alert(\"사용 가능한 아이디입니다.\");\r\n    } else {\r\n        alert(\"중복 되는 아이디가 존재합니다.\");\r\n        return;\r\n    }\r\n    }\r\n\r\n    const MemberSignUpButton = () => {\r\n        \r\n        //아이디가 유효하지 않을 때 \r\n        if(!memberIdValidation){\r\n            alert(\"아이디 중복 검사를 확인 해주세요. \");\r\n            return;\r\n        }\r\n         // 비밀번호 공백 불가\r\n         if(!memberPw || !memberPwCheck){\r\n            alert(\"비밀번호를 입력해주세요.\");\r\n            return;\r\n        }\r\n        // 비밀번호가 불일치\r\n        if(memberPw !== memberPwCheck){\r\n            alert(\"비밀번호가 일치하지 않습니다.\");\r\n            return;\r\n        }\r\n        // 비밀번호 정규식\r\n        if(!passwordRegex.test(memberPw) || !passwordRegex.test(memberPwCheck)){\r\n            alert(\"비밀번호를 올바른 형식으로 입력해주세요.\");\r\n            return;\r\n        }\r\n        // 주민번호 공백 불가\r\n        if(!memberBirth.trim()){\r\n            alert(\"생년월일을 입력해주세요.\");\r\n            return;\r\n        }\r\n        // 주민번호 정규식 \r\n        if (!birthRegex.test(memberBirth)) {\r\n            alert(\"생년월일 형식을 올바르게 입력해주세요. (oooooo-o)\");\r\n            return;\r\n        }\r\n        // 전화번호 공백 불가\r\n        if(!memberPhone){\r\n            alert(\"전화번호를 입력해주세요.\");\r\n            return;\r\n        }\r\n        // 전화번호 정규식 \r\n        if (!phoneRegex.test(memberPhone)) {\r\n            alert(\"전화번호를 올바른 형식으로 입력해주세요.\");\r\n            return;\r\n        }\r\n         // **************************************************************   사용자 입력 정보의 집합   ***********************************************************************\r\n         const memberInputInfo = {};\r\n         memberInputInfo.memberId = memberId;\r\n         memberInputInfo.memberPw = memberPw;\r\n         memberInputInfo.memberPwCheck = memberPwCheck;\r\n         memberInputInfo.memberName = data.name;\r\n         memberInputInfo.memberAge = memberAge;\r\n         memberInputInfo.memberGender = memberGender;\r\n         memberInputInfo.memberBirth = memberBirth;\r\n         memberInputInfo.memberEmail = data.email;\r\n         memberInputInfo.memberAddress = memberAddress;\r\n         memberInputInfo.memberPhone = memberPhone;\r\n         /*********************************************************************************************************************************************************************/\r\n        \r\n         \r\n   // ****************************************************************** 회원 가입 INPUT 정보 Controller 로 보내는 Fetch ***********************************************************************      \r\n         fetch(\"/memberSignUp\", {\r\n             method : \"POST\",\r\n             headers : {\"Content-Type\" : \"application/json\"},\r\n             body : JSON.stringify(memberInputInfo)\r\n         })\r\n         .then(response => response.text())\r\n         .then(result => {\r\n \r\n             if(Number(result) > 0){\r\n                 alert(\"회원 가입이 완료되었습니다.\");\r\n                 \r\n                 setMemberId(\"\")\r\n                 setMemberPw(\"\")\r\n                 setMemberPwCheck(\"\")\r\n                 setMemberAge(\"\")\r\n                 setMemberGender(\"\")\r\n                 setMemberBirth(\"\")\r\n                 setMemberAddress(\"\")\r\n                 setMemberPhone(\"\")\r\n                 \r\n                 navigate('/'); \r\n             } else {\r\n                 alert(\"회원 가입이 실패하였습니다.\");\r\n             }\r\n         })\r\n     }\r\n\r\n    return (\r\n        \r\n        <div className=\"login-container\">\r\n            \r\n            {emailPlug ? \r\n            (<div className=\"login-check-container\">\r\n                <div className=\"login-check-card\">\r\n                    <h2 className=\"login-check-heading\">회원 정보 확인</h2>\r\n                    <p className=\"login-check-message\">\r\n                        {data.name} 님 안녕하세요!\r\n                    </p>\r\n                    <p className=\"login-check-message\">\r\n                        가입된 이메일 : {data.email} \r\n                    </p>\r\n\r\n                    <p className=\"login-check-instruction\">\r\n                        가입 여부 확인 페이지로 이동하시거나 홈으로 돌아가세요.\r\n                    </p>\r\n                    <div className=\"login-check-button-group\">\r\n                        <a href=\"/registerCheck\" className=\"login-check-btn\">\r\n                            가입 여부 확인\r\n                        </a>\r\n                        <a href=\"/\" className=\"login-check-btn login-check-home-btn\">\r\n                            Home\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>) : \r\n            \r\n            (<><h2>회원가입</h2>\r\n        {/*-------------------------------------------------------------------------- 아이디 --------------------------------------------------------------------------*/}\r\n        <div className=\"input-value\">\r\n            <input type=\"text\" value={memberId} className={memberIdValidation ? \"\" : \"memberId-error\"}  \r\n            onChange={e => {memberIdCheck(e.target.value)}} placeholder=\"아이디를 입력해주세요.\" required/>\r\n        </div>\r\n        {memberId && ( \r\n        idRegex.test(memberId) ? (\r\n            <p style={{ color: \"green\", margin: \"0\", fontSize: \"13px\" }}>\r\n                올바른 형식입니다.\r\n            </p>\r\n        ) : (\r\n            <p style={{ color: \"red\", margin: \"0\", fontSize: \"13px\" }}>\r\n                8 ~ 15 자 영문 또는 숫자를 입력해주세요.\r\n            </p>\r\n        )\r\n        )}\r\n         <button className=\"btn btn-dark\" onClick={duplicationIdCheck}>아이디 중복 확인</button>\r\n        {/*------------------------------------------------------------------------------------------------------------------------------------------------------------------*/}\r\n\r\n        {/*************************************************************************** 비밀번호 ********************************************************************************/ }\r\n        <div className=\"input-value\">\r\n            <input type=\"password\" value={memberPw} \r\n            onChange={e => setMemberPw(e.target.value)} placeholder=\"비밀번호를 입력해주세요.\" required/>\r\n        </div>\r\n\r\n        <div className=\"input-value\">\r\n            <input type=\"password\" value={memberPwCheck} \r\n            onChange={e => setMemberPwCheck(e.target.value)} placeholder=\"비밀번호를 재 입력해주세요.\" required/>\r\n        </div>\r\n         \r\n         {isInputFilled && (\r\n            <>\r\n                {isPasswordValid && arePasswordsMatching ? (\r\n                    <p style={{ color: \"green\", margin: \"0\", fontSize: \"13px\" }}>비밀번호가 일치합니다.</p>\r\n                ) : (\r\n                    <>\r\n                        {!arePasswordsMatching && (\r\n                            <p style={{ color: \"red\", margin: \"0\", fontSize: \"13px\" }}>비밀번호가 일치하지 않습니다.</p>\r\n                        )}\r\n                        {!isPasswordValid && (\r\n                            <p style={{ color: \"red\", margin: \"0\", fontSize: \"13px\" }}>\r\n                                비밀번호는 10 ~ 15 자, 특수문자를 포함해야 합니다.\r\n                            </p>\r\n                        )}\r\n                    </>\r\n                )}\r\n            </>\r\n        )}\r\n         {/********************************************************************************************************************************************************************/ }\r\n         {/* ******************************************************************** 주민번호 ************************************************************************** */}\r\n         <div>\r\n            <input\r\n                type=\"text\"\r\n                value={memberBirth}\r\n                onChange={birthHandleChange}\r\n                placeholder=\"주민번호 7자리를 입력해주세요 / (-) 자동 생성\"\r\n                required\r\n                maxLength=\"8\" // 하이픈 포함 최대 8자리\r\n            />\r\n            {memberBirth && (\r\n                <p style={{ color: (birthRegex.test(memberBirth) && isDateValid(memberBirth)) ? \"green\" : \"red\", margin: \"0\", fontSize: \"13px\" }}>\r\n                    {birthRegex.test(memberBirth) && isDateValid(memberBirth) ? \r\n                        `올바른 형식입니다.` : \r\n                        \"형식이 올바르지 않습니다.\"}\r\n                </p>\r\n            )}\r\n        </div>\r\n    {/* ****************************************************************************************************************************************************************** */}\r\n            \r\n    {/*----------------------------------------------------------------------------전화번호-----------------------------------------------------------------------------------------*/}\r\n        <div className=\"input-value\">\r\n            <input type=\"text\" value={memberPhone} \r\n            onChange={phoneHandleChange} \r\n            placeholder=\"전화번호를 입력해주세요.\" required\r\n            />\r\n        </div>\r\n        {memberPhone && (\r\n                <p\r\n                    style={{\r\n                        color: phoneRegex.test(memberPhone) ? \"green\" : \"red\",\r\n                        margin: \"0\",\r\n                        fontSize: \"13px\"\r\n                    }}\r\n                >\r\n                    {phoneRegex.test(memberPhone)\r\n                        ? \"올바른 형식입니다.\"\r\n                        : \"전화번호 010-****-****\"}\r\n                </p>\r\n            )}\r\n    {/*--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/}\r\n       \r\n     {/* ********************************************************************** 주소 ************************************************************************** */}\r\n        <div className=\"input-value\">\r\n            <AddressSearch onAddressChange={handleAddressChange}/>\r\n        </div>\r\n     {/* ******************************************************************************************************************************************************** */}\r\n     <div className=\"input-value\">\r\n            <button type=\"submit\" className=\"btn btn-dark\" onClick={MemberSignUpButton}>회원가입</button>\r\n        </div>\r\n        </>)}\r\n        \r\n        </div>\r\n       \r\n    )\r\n}\r\nexport default GoogleSignUp;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAGC,QAAQ,KAAO,OAAO,CACrC,OAASC,WAAW,CAAEC,WAAW,KAAS,kBAAkB,CAC5D,MAAO,CAAAC,aAAa,KAAM,iBAAiB,CAC3C,MAAO,CAAAC,KAAK,KAAM,OAAO,CACzB,MAAO,mBAAmB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,CAAAC,QAAA,IAAAC,SAAA,yBAE3B,KAAM,CAAAC,YAAY,CAAGA,CAAA,GAAM,CAEvB,KAAM,CAACC,QAAQ,CAAEC,WAAW,CAAC,CAAGb,QAAQ,CAAC,EAAE,CAAC,CAC5C,KAAM,CAACc,QAAQ,CAAEC,WAAW,CAAC,CAAGf,QAAQ,CAAC,EAAE,CAAC,CAC5C,KAAM,CAACgB,aAAa,CAAEC,gBAAgB,CAAC,CAAGjB,QAAQ,CAAC,EAAE,CAAC,CACtD,KAAM,CAACkB,SAAS,CAAEC,YAAY,CAAC,CAAGnB,QAAQ,CAAC,EAAE,CAAC,CAC9C,KAAM,CAACoB,YAAY,CAAEC,eAAe,CAAC,CAAGrB,QAAQ,CAAC,EAAE,CAAC,CACpD,KAAM,CAACsB,WAAW,CAAEC,cAAc,CAAC,CAAGvB,QAAQ,CAAC,EAAE,CAAC,CAClD,KAAM,CAACwB,aAAa,CAAEC,gBAAgB,CAAC,CAAGzB,QAAQ,CAAC,EAAE,CAAC,CACtD,KAAM,CAAC0B,WAAW,CAAEC,cAAc,CAAC,CAAG3B,QAAQ,CAAC,EAAE,CAAC,CAClD,KAAM,CAAC4B,SAAS,CAAEC,YAAY,CAAC,CAAG7B,QAAQ,CAAC,IAAI,CAAC,CAEhD,KAAM,CAAA8B,QAAQ,CAAG7B,WAAW,CAAC,CAAC,CAAE;AAEhC,KAAM,CAAA8B,QAAQ,CAAG7B,WAAW,CAAC,CAAC,CAC9B,KAAM,CAAA8B,IAAI,CAAGD,QAAQ,CAACE,KAAK,CAAG;AAC9BC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAEH,IAAI,CAAC,CAC5B;AACA,KAAM,CAAAI,OAAO,CAAG,qBAAqB,CACrC,KAAM,CAAAC,aAAa,CAAG,oGAAoG,CAC1H,KAAM,CAAAC,UAAU,CAAG,wCAAwC,CAC3D,KAAM,CAAAC,UAAU,CAAG,eAAe,CAClC,KAAM,CAAAC,mBAAmB,CAAG,aAAa,CAEzC,eACApC,KAAK,CAACqC,IAAI,CAAC,0BAA0B,CAAGT,IAAI,CAACU,KAAK,CAAC,CAClDC,IAAI,CAACC,QAAQ,EAAI,CACd,GAAGC,MAAM,CAACD,QAAQ,CAACZ,IAAI,CAAC,EAAG,CAAE,CAAC,CAAC,CAC3BH,YAAY,CAAC,IAAI,CAAC,CACtB,CAAC,IAAM,CACHA,YAAY,CAAC,KAAK,CAAC,CACvB,CACJ,CAAC,CAAC,CACDiB,KAAK,CAACC,GAAG,EAAI,CACVC,KAAK,CAAC,UAAU,CAAGD,GAAG,CAAC,CAC3B,CAAC,CAAC,CAEF;AACA,KAAM,CAACE,kBAAkB,CAAEC,qBAAqB,CAAC,CAAGlD,QAAQ,CAAC,KAAK,CAAC,CAEnE;AACA,KAAM,CAAAmD,mBAAmB,CAAIC,OAAO,EAAK,CACrC3B,gBAAgB,CAAC2B,OAAO,CAAC,CAC3B,CAAC,CAEH;AACA,KAAM,CAAAC,eAAe,CAAGhB,aAAa,CAACiB,IAAI,CAACxC,QAAQ,CAAC,EAAIuB,aAAa,CAACiB,IAAI,CAACtC,aAAa,CAAC,CACzF,KAAM,CAAAuC,oBAAoB,CAAGzC,QAAQ,GAAKE,aAAa,CACvD,KAAM,CAAAwC,aAAa,CAAG1C,QAAQ,EAAIE,aAAa,CAE/C;AACA,KAAM,CAAAyC,iBAAiB,CAAIC,KAAK,EAAK,CACjC,KAAM,CAAAC,YAAY,CAAGD,KAAK,CAACE,OAAO,CAAC,KAAK,CAAE,EAAE,CAAC,CAE7C,GAAID,YAAY,CAACE,MAAM,EAAI,CAAC,CAAE,CAC1B,MAAO,CAAAF,YAAY,CACvB,CACA,GAAIA,YAAY,CAACE,MAAM,EAAI,CAAC,CAAE,CAC1B,MAAO,GAAGF,YAAY,CAACG,KAAK,CAAC,CAAC,CAAE,CAAC,CAAC,IAAIH,YAAY,CAACG,KAAK,CAAC,CAAC,CAAC,EAAE,CACjE,CACA,MAAO,GAAGH,YAAY,CAACG,KAAK,CAAC,CAAC,CAAE,CAAC,CAAC,IAAIH,YAAY,CAACG,KAAK,CAAC,CAAC,CAAE,CAAC,CAAC,IAAIH,YAAY,CAACG,KAAK,CAAC,CAAC,CAAE,EAAE,CAAC,EAAE,CACjG,CAAC,CAED;AACA,KAAM,CAAAC,iBAAiB,CAAIC,CAAC,EAAK,CAC7B,KAAM,CAAAC,oBAAoB,CAAGR,iBAAiB,CAACO,CAAC,CAACE,MAAM,CAACR,KAAK,CAAC,CAC9D/B,cAAc,CAACsC,oBAAoB,CAAC,CACxC,CAAC,CACD;AACJ;AACA;AACA,KAAM,CAAAE,WAAW,CAAIC,SAAS,EAAK,CAC/B,KAAM,CAACC,QAAQ,CAAEC,UAAU,CAAC,CAAGF,SAAS,CAACG,KAAK,CAAC,GAAG,CAAC,CAEnD;AACA,GAAIF,QAAQ,CAACR,MAAM,GAAK,CAAC,EAAI,CAAC,SAAS,CAACP,IAAI,CAACe,QAAQ,CAAC,EAAI,CAAC,SAAS,CAACf,IAAI,CAACgB,UAAU,CAAC,CAAE,CACnF,MAAO,MAAK,CAChB,CAEA;AACA,KAAM,CAAAE,EAAE,CAAGC,QAAQ,CAACJ,QAAQ,CAACP,KAAK,CAAC,CAAC,CAAE,CAAC,CAAC,CAAE,EAAE,CAAC,CAC7C,KAAM,CAAAY,EAAE,CAAGD,QAAQ,CAACJ,QAAQ,CAACP,KAAK,CAAC,CAAC,CAAE,CAAC,CAAC,CAAE,EAAE,CAAC,CAC7C,KAAM,CAAAa,EAAE,CAAGF,QAAQ,CAACJ,QAAQ,CAACP,KAAK,CAAC,CAAC,CAAE,CAAC,CAAC,CAAE,EAAE,CAAC,CAE7C;AACA,KAAM,CAAAc,IAAI,CAAGJ,EAAE,EAAI,CAAC,EAAIA,EAAE,EAAI,EAAE,CAAIA,EAAE,CAAG,EAAE,CAAG,IAAI,CAAGA,EAAE,CAAG,IAAI,CAAGA,EAAE,CAAIA,EAAE,CAEzE;AACA,GAAIE,EAAE,CAAG,CAAC,EAAIA,EAAE,CAAG,EAAE,CAAE,MAAO,MAAK,CAAE;AAErC;AACA,KAAM,CAAAG,WAAW,CAAG,GAAI,CAAAC,IAAI,CAACF,IAAI,CAAEF,EAAE,CAAE,CAAC,CAAC,CAACK,OAAO,CAAC,CAAC,CACnD,GAAIJ,EAAE,CAAG,CAAC,EAAIA,EAAE,CAAGE,WAAW,CAAE,MAAO,MAAK,CAAE;AAE9C,MAAO,KAAI,CACf,CAAC,CACD;AAEA;AACA,KAAM,CAAAG,YAAY,CAAIZ,SAAS,EAAK,CAChC,KAAM,CAACQ,IAAI,CAAEK,KAAK,CAAEC,GAAG,CAAC,CAAG,CAACd,SAAS,CAACN,KAAK,CAAC,CAAC,CAAE,CAAC,CAAC,CAAEM,SAAS,CAACN,KAAK,CAAC,CAAC,CAAE,CAAC,CAAC,CAAEM,SAAS,CAACN,KAAK,CAAC,CAAC,CAAE,CAAC,CAAC,CAAC,CAChG,KAAM,CAAAqB,SAAS,CAAGV,QAAQ,CAACG,IAAI,CAAE,EAAE,CAAC,CACpC,KAAM,CAAAQ,WAAW,CAAG,GAAI,CAAAN,IAAI,CAAC,CAAC,CAACO,WAAW,CAAC,CAAC,CAC5C,KAAM,CAAAC,GAAG,CAAGF,WAAW,CAAGD,SAAS,CACnC,MAAO,CAAAG,GAAG,CACd,CAAC,CAED;AACA,KAAM,CAAAC,SAAS,CAAIC,UAAU,EAAK,CAC9B,OAAQA,UAAU,EACd,IAAK,GAAG,CAAE,IAAK,GAAG,CACd,MAAO,MAAM,CAAE;AACnB,IAAK,GAAG,CAAE,IAAK,GAAG,CACd,MAAO,QAAQ,CAAE;AACrB,QACI,MAAO,SAAS,CACxB,CACJ,CAAC,CACI;AACA,KAAM,CAAAC,iBAAiB,CAAIzB,CAAC,EAAK,CAC9B,GAAI,CAAAN,KAAK,CAAGM,CAAC,CAACE,MAAM,CAACR,KAAK,CAE1B;AACAA,KAAK,CAAGA,KAAK,CAACE,OAAO,CAAC,QAAQ,CAAE,EAAE,CAAC,CAEnC;AACA,GAAIF,KAAK,CAACG,MAAM,CAAG,CAAC,CAAE,CAClBH,KAAK,CAAGA,KAAK,CAACI,KAAK,CAAC,CAAC,CAAE,CAAC,CAAC,CAAG,GAAG,CAAGJ,KAAK,CAACI,KAAK,CAAC,CAAC,CAAE,CAAC,CAAC,CACvD,CAEAvC,cAAc,CAACmC,KAAK,CAAC,CAErB;AACA,GAAI,eAAe,CAACJ,IAAI,CAACI,KAAK,CAAC,CAAE,CAC7B,KAAM,CAACW,QAAQ,CAAEC,UAAU,CAAC,CAAGZ,KAAK,CAACa,KAAK,CAAC,GAAG,CAAC,CAC/C,KAAM,CAAAmB,UAAU,CAAGpB,UAAU,GAAK,GAAG,EAAIA,UAAU,GAAK,GAAG,CAAG,IAAI,CAAG,IAAI,CACzE,KAAM,CAAAqB,QAAQ,CAAGD,UAAU,CAAGrB,QAAQ,CACtC,KAAM,CAAAiB,GAAG,CAAGN,YAAY,CAACW,QAAQ,CAAC,CAClC,KAAM,CAAAC,MAAM,CAAGL,SAAS,CAACjB,UAAU,CAAC,CACpCnD,YAAY,CAACmE,GAAG,CAAC,CACjBjE,eAAe,CAACuE,MAAM,CAAC,CAC3B,CAAC,IAAM,CACHzE,YAAY,CAAC,EAAE,CAAC,CAChBE,eAAe,CAAC,EAAE,CAAC,CACvB,CACJ,CAAC,CAEH;AAIF,6JAGI,KAAM,CAAAwE,aAAa,CAAIC,OAAO,EAAK,CACnC;AACEjF,WAAW,CAACiF,OAAO,CAAC,CACtB;AACAC,KAAK,CAAC,mBAAmB,CAAGD,OAAO,CAAE;AAAA,CACpCnD,IAAI,CAACqD,IAAI,EAAIA,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBtD,IAAI,CAACuD,MAAM,EAAI,CAEd;AACA,GAAGrD,MAAM,CAACqD,MAAM,CAAC,GAAK,CAAC,CACrBhD,qBAAqB,CAAC,IAAI,CAAC,CAAC,IAE9B,CAAAA,qBAAqB,CAAC,KAAK,CAAC,CAC9B,CAAC,CAAC,CACJ,CAAC,CACD;AAEA;AACE,KAAM,CAAAiD,kBAAkB,CAAGA,CAAA,GAAM,CACjC,GAAI,CAACvF,QAAQ,CAACwF,IAAI,CAAC,CAAC,CAAE,CAClBpD,KAAK,CAAC,cAAc,CAAC,CACrB,OACJ,CACA,GAAIR,mBAAmB,CAACc,IAAI,CAAC1C,QAAQ,CAAC,CAAE,CACpCoC,KAAK,CAAC,kBAAkB,CAAC,CACzBE,qBAAqB,CAAC,KAAK,CAAC,CAC5B,OACJ,CACA,GAAGtC,QAAQ,CAACiD,MAAM,CAAG,CAAC,EAAIjD,QAAQ,CAACiD,MAAM,CAAG,EAAE,CAAC,CAC3Cb,KAAK,CAAC,gBAAgB,CAAC,CACvB,OACJ,CACA,GAAGC,kBAAkB,CAAC,CAClBD,KAAK,CAAC,gBAAgB,CAAC,CAC3B,CAAC,IAAM,CACHA,KAAK,CAAC,mBAAmB,CAAC,CAC1B,OACJ,CACA,CAAC,CAED,KAAM,CAAAqD,kBAAkB,CAAGA,CAAA,GAAM,CAE7B;AACA,GAAG,CAACpD,kBAAkB,CAAC,CACnBD,KAAK,CAAC,sBAAsB,CAAC,CAC7B,OACJ,CACC;AACA,GAAG,CAAClC,QAAQ,EAAI,CAACE,aAAa,CAAC,CAC5BgC,KAAK,CAAC,eAAe,CAAC,CACtB,OACJ,CACA;AACA,GAAGlC,QAAQ,GAAKE,aAAa,CAAC,CAC1BgC,KAAK,CAAC,kBAAkB,CAAC,CACzB,OACJ,CACA;AACA,GAAG,CAACX,aAAa,CAACiB,IAAI,CAACxC,QAAQ,CAAC,EAAI,CAACuB,aAAa,CAACiB,IAAI,CAACtC,aAAa,CAAC,CAAC,CACnEgC,KAAK,CAAC,wBAAwB,CAAC,CAC/B,OACJ,CACA;AACA,GAAG,CAAC1B,WAAW,CAAC8E,IAAI,CAAC,CAAC,CAAC,CACnBpD,KAAK,CAAC,eAAe,CAAC,CACtB,OACJ,CACA;AACA,GAAI,CAACT,UAAU,CAACe,IAAI,CAAChC,WAAW,CAAC,CAAE,CAC/B0B,KAAK,CAAC,kCAAkC,CAAC,CACzC,OACJ,CACA;AACA,GAAG,CAACtB,WAAW,CAAC,CACZsB,KAAK,CAAC,eAAe,CAAC,CACtB,OACJ,CACA;AACA,GAAI,CAACV,UAAU,CAACgB,IAAI,CAAC5B,WAAW,CAAC,CAAE,CAC/BsB,KAAK,CAAC,wBAAwB,CAAC,CAC/B,OACJ,CACC;AACA,KAAM,CAAAsD,eAAe,CAAG,CAAC,CAAC,CAC1BA,eAAe,CAAC1F,QAAQ,CAAGA,QAAQ,CACnC0F,eAAe,CAACxF,QAAQ,CAAGA,QAAQ,CACnCwF,eAAe,CAACtF,aAAa,CAAGA,aAAa,CAC7CsF,eAAe,CAACC,UAAU,CAAGvE,IAAI,CAACwE,IAAI,CACtCF,eAAe,CAACpF,SAAS,CAAGA,SAAS,CACrCoF,eAAe,CAAClF,YAAY,CAAGA,YAAY,CAC3CkF,eAAe,CAAChF,WAAW,CAAGA,WAAW,CACzCgF,eAAe,CAACG,WAAW,CAAGzE,IAAI,CAACU,KAAK,CACxC4D,eAAe,CAAC9E,aAAa,CAAGA,aAAa,CAC7C8E,eAAe,CAAC5E,WAAW,CAAGA,WAAW,CACzC,uKAGN;AACMqE,KAAK,CAAC,eAAe,CAAE,CACnBW,MAAM,CAAG,MAAM,CACfC,OAAO,CAAG,CAAC,cAAc,CAAG,kBAAkB,CAAC,CAC/CC,IAAI,CAAGC,IAAI,CAACC,SAAS,CAACR,eAAe,CACzC,CAAC,CAAC,CACD3D,IAAI,CAACC,QAAQ,EAAIA,QAAQ,CAACqD,IAAI,CAAC,CAAC,CAAC,CACjCtD,IAAI,CAACuD,MAAM,EAAI,CAEZ,GAAGrD,MAAM,CAACqD,MAAM,CAAC,CAAG,CAAC,CAAC,CAClBlD,KAAK,CAAC,iBAAiB,CAAC,CAExBnC,WAAW,CAAC,EAAE,CAAC,CACfE,WAAW,CAAC,EAAE,CAAC,CACfE,gBAAgB,CAAC,EAAE,CAAC,CACpBE,YAAY,CAAC,EAAE,CAAC,CAChBE,eAAe,CAAC,EAAE,CAAC,CACnBE,cAAc,CAAC,EAAE,CAAC,CAClBE,gBAAgB,CAAC,EAAE,CAAC,CACpBE,cAAc,CAAC,EAAE,CAAC,CAElBG,QAAQ,CAAC,GAAG,CAAC,CACjB,CAAC,IAAM,CACHkB,KAAK,CAAC,iBAAiB,CAAC,CAC5B,CACJ,CAAC,CAAC,CACN,CAAC,CAEF,mBAEI1C,IAAA,QAAKyG,SAAS,CAAC,iBAAiB,CAAAC,QAAA,CAE3BpF,SAAS,cACTtB,IAAA,QAAKyG,SAAS,CAAC,uBAAuB,CAAAC,QAAA,cACnCxG,KAAA,QAAKuG,SAAS,CAAC,kBAAkB,CAAAC,QAAA,eAC7B1G,IAAA,OAAIyG,SAAS,CAAC,qBAAqB,CAAAC,QAAA,CAAC,wCAAQ,CAAI,CAAC,cACjDxG,KAAA,MAAGuG,SAAS,CAAC,qBAAqB,CAAAC,QAAA,EAC7BhF,IAAI,CAACwE,IAAI,CAAC,yCACf,EAAG,CAAC,cACJhG,KAAA,MAAGuG,SAAS,CAAC,qBAAqB,CAAAC,QAAA,EAAC,0CACrB,CAAChF,IAAI,CAACU,KAAK,EACtB,CAAC,cAEJpC,IAAA,MAAGyG,SAAS,CAAC,yBAAyB,CAAAC,QAAA,CAAC,yJAEvC,CAAG,CAAC,cACJxG,KAAA,QAAKuG,SAAS,CAAC,0BAA0B,CAAAC,QAAA,eACrC1G,IAAA,MAAG2G,IAAI,CAAC,gBAAgB,CAACF,SAAS,CAAC,iBAAiB,CAAAC,QAAA,CAAC,wCAErD,CAAG,CAAC,cACJ1G,IAAA,MAAG2G,IAAI,CAAC,GAAG,CAACF,SAAS,CAAC,sCAAsC,CAAAC,QAAA,CAAC,MAE7D,CAAG,CAAC,EACH,CAAC,EACL,CAAC,CACL,CAAC,cAELxG,KAAA,CAAAE,SAAA,EAAAsG,QAAA,eAAE1G,IAAA,OAAA0G,QAAA,CAAI,0BAAI,CAAI,CAAC,cAEpB1G,IAAA,QAAKyG,SAAS,CAAC,aAAa,CAAAC,QAAA,cACxB1G,IAAA,UAAO4G,IAAI,CAAC,MAAM,CAACxD,KAAK,CAAE9C,QAAS,CAACmG,SAAS,CAAE9D,kBAAkB,CAAG,EAAE,CAAG,gBAAiB,CAC1FkE,QAAQ,CAAEnD,CAAC,EAAI,CAAC6B,aAAa,CAAC7B,CAAC,CAACE,MAAM,CAACR,KAAK,CAAC,EAAE,CAAC0D,WAAW,CAAC,gEAAc,CAACC,QAAQ,MAAC,CAAC,CACpF,CAAC,CACLzG,QAAQ,GACTwB,OAAO,CAACkB,IAAI,CAAC1C,QAAQ,CAAC,cAClBN,IAAA,MAAGgH,KAAK,CAAE,CAAEC,KAAK,CAAE,OAAO,CAAEC,MAAM,CAAE,GAAG,CAAEC,QAAQ,CAAE,MAAO,CAAE,CAAAT,QAAA,CAAC,oDAE7D,CAAG,CAAC,cAEJ1G,IAAA,MAAGgH,KAAK,CAAE,CAAEC,KAAK,CAAE,KAAK,CAAEC,MAAM,CAAE,GAAG,CAAEC,QAAQ,CAAE,MAAO,CAAE,CAAAT,QAAA,CAAC,kGAE3D,CAAG,CACN,CACA,cACA1G,IAAA,WAAQyG,SAAS,CAAC,cAAc,CAACW,OAAO,CAAEvB,kBAAmB,CAAAa,QAAA,CAAC,8CAAS,CAAQ,CAAC,cAIjF1G,IAAA,QAAKyG,SAAS,CAAC,aAAa,CAAAC,QAAA,cACxB1G,IAAA,UAAO4G,IAAI,CAAC,UAAU,CAACxD,KAAK,CAAE5C,QAAS,CACvCqG,QAAQ,CAAEnD,CAAC,EAAIjD,WAAW,CAACiD,CAAC,CAACE,MAAM,CAACR,KAAK,CAAE,CAAC0D,WAAW,CAAC,sEAAe,CAACC,QAAQ,MAAC,CAAC,CACjF,CAAC,cAEN/G,IAAA,QAAKyG,SAAS,CAAC,aAAa,CAAAC,QAAA,cACxB1G,IAAA,UAAO4G,IAAI,CAAC,UAAU,CAACxD,KAAK,CAAE1C,aAAc,CAC5CmG,QAAQ,CAAEnD,CAAC,EAAI/C,gBAAgB,CAAC+C,CAAC,CAACE,MAAM,CAACR,KAAK,CAAE,CAAC0D,WAAW,CAAC,6EAAiB,CAACC,QAAQ,MAAC,CAAC,CACxF,CAAC,CAEJ7D,aAAa,eACXlD,IAAA,CAAAI,SAAA,EAAAsG,QAAA,CACK3D,eAAe,EAAIE,oBAAoB,cACpCjD,IAAA,MAAGgH,KAAK,CAAE,CAAEC,KAAK,CAAE,OAAO,CAAEC,MAAM,CAAE,GAAG,CAAEC,QAAQ,CAAE,MAAO,CAAE,CAAAT,QAAA,CAAC,gEAAY,CAAG,CAAC,cAE7ExG,KAAA,CAAAE,SAAA,EAAAsG,QAAA,EACK,CAACzD,oBAAoB,eAClBjD,IAAA,MAAGgH,KAAK,CAAE,CAAEC,KAAK,CAAE,KAAK,CAAEC,MAAM,CAAE,GAAG,CAAEC,QAAQ,CAAE,MAAO,CAAE,CAAAT,QAAA,CAAC,mFAAgB,CAAG,CACjF,CACA,CAAC3D,eAAe,eACb/C,IAAA,MAAGgH,KAAK,CAAE,CAAEC,KAAK,CAAE,KAAK,CAAEC,MAAM,CAAE,GAAG,CAAEC,QAAQ,CAAE,MAAO,CAAE,CAAAT,QAAA,CAAC,4HAE3D,CAAG,CACN,EACH,CACL,CACH,CACL,cAGAxG,KAAA,QAAAwG,QAAA,eACG1G,IAAA,UACI4G,IAAI,CAAC,MAAM,CACXxD,KAAK,CAAEpC,WAAY,CACnB6F,QAAQ,CAAE1B,iBAAkB,CAC5B2B,WAAW,CAAC,mHAA8B,CAC1CC,QAAQ,MACRM,SAAS,CAAC,GAAI;AAAA,CACjB,CAAC,CACDrG,WAAW,eACRhB,IAAA,MAAGgH,KAAK,CAAE,CAAEC,KAAK,CAAGhF,UAAU,CAACe,IAAI,CAAChC,WAAW,CAAC,EAAI6C,WAAW,CAAC7C,WAAW,CAAC,CAAI,OAAO,CAAG,KAAK,CAAEkG,MAAM,CAAE,GAAG,CAAEC,QAAQ,CAAE,MAAO,CAAE,CAAAT,QAAA,CAC5HzE,UAAU,CAACe,IAAI,CAAChC,WAAW,CAAC,EAAI6C,WAAW,CAAC7C,WAAW,CAAC,CACrD,YAAY,CACZ,gBAAgB,CACrB,CACN,EACA,CAAC,cAINhB,IAAA,QAAKyG,SAAS,CAAC,aAAa,CAAAC,QAAA,cACxB1G,IAAA,UAAO4G,IAAI,CAAC,MAAM,CAACxD,KAAK,CAAEhC,WAAY,CACtCyF,QAAQ,CAAEpD,iBAAkB,CAC5BqD,WAAW,CAAC,sEAAe,CAACC,QAAQ,MACnC,CAAC,CACD,CAAC,CACL3F,WAAW,eACJpB,IAAA,MACIgH,KAAK,CAAE,CACHC,KAAK,CAAEjF,UAAU,CAACgB,IAAI,CAAC5B,WAAW,CAAC,CAAG,OAAO,CAAG,KAAK,CACrD8F,MAAM,CAAE,GAAG,CACXC,QAAQ,CAAE,MACd,CAAE,CAAAT,QAAA,CAED1E,UAAU,CAACgB,IAAI,CAAC5B,WAAW,CAAC,CACvB,YAAY,CACZ,oBAAoB,CAC3B,CACN,cAILpB,IAAA,QAAKyG,SAAS,CAAC,aAAa,CAAAC,QAAA,cACxB1G,IAAA,CAACH,aAAa,EAACyH,eAAe,CAAEzE,mBAAoB,CAAC,CAAC,CACrD,CAAC,cAET7C,IAAA,QAAKyG,SAAS,CAAC,aAAa,CAAAC,QAAA,cACrB1G,IAAA,WAAQ4G,IAAI,CAAC,QAAQ,CAACH,SAAS,CAAC,cAAc,CAACW,OAAO,CAAErB,kBAAmB,CAAAW,QAAA,CAAC,0BAAI,CAAQ,CAAC,CACxF,CAAC,EACJ,CAAE,CAEC,CAAC,CAGd,CAAC,CACD,cAAe,CAAArG,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}