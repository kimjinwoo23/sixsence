{"ast":null,"code":"import React,{useContext,useEffect,useState}from'react';import axios from'axios';import{useLocation}from'react-router-dom';// 버튼 클릭 없이 위치 설정\nimport LoginContext from'./LoginContext';import{useNavigate}from'react-router-dom';import AddressSearch from\"./AddressSearch\";import\"../css/NaverTable.css\";/* \r\nuseLocation: URL 의 정보를 포함한 객체이다.\r\n             경로, hash, 문자열 값 등을 가지고 온 객체이다.\r\n*/import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";export function NaverSignup(){const[userInfo,setUserInfo]=useState(null);/***** 2024-08-12 비밀번호 값 설정 추가 *****/const[memberId,setMemberId]=useState(\"\");const[memberPw,setMemberPw]=useState(\"\");const[memberPwCheck,setMemberPwCheck]=useState(\"\");const[memberBirth,setMemberBirth]=useState(\"\");const[memberAge,setMemberAge]=useState(\"\");const[memberGender,setMemberGender]=useState(\"\");const[memberAddress,setMemberAddress]=useState(\"\");const[loading,setLoading]=useState(true);const location=useLocation();const{loginMember}=useContext(LoginContext);// 정규식\nconst idRegex=/^[a-zA-Z0-9]{8,15}$/;const passwordRegex=/^(?=.*[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z0-9!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]{10,15}$/;const consonantVowelRegex=/^[ㄱ-ㅎㅏ-ㅣ]+$/;const birthRegex=/^\\d{6}-[1-4]$/;// ID 중복 검사 변수\nconst[memberIdValidation,setMemberIdValidation]=useState(false);// useNavigate 훅 호출\nconst navigate=useNavigate();// 주소 핸들러\nconst handleAddressChange=address=>{setMemberAddress(address);};// 비밀번호 입력시 <p> 태그 활용하기 위해서 \nconst isPasswordValid=passwordRegex.test(memberPw)&&passwordRegex.test(memberPwCheck);const arePasswordsMatching=memberPw===memberPwCheck;const isInputFilled=memberPw&&memberPwCheck;//---------------------------------------------주민번호 날짜 관련 정규식 부가적인 요소------------------------------------------------\n// 날짜 유효성 검사 함수\nconst isDateValid=birthDate=>{const[datePart,genderPart]=birthDate.split('-');// 날짜 부분이 올바른지 확인\nif(datePart.length!==6||!/^\\d{6}$/.test(datePart)||!/^[1-4]$/.test(genderPart)){return false;}// 연도, 월, 일 추출\nconst yy=parseInt(datePart.slice(0,2),10);const mm=parseInt(datePart.slice(2,4),10);const dd=parseInt(datePart.slice(4,6),10);// YY를 YYYY로 변환\nconst year=yy>=0&&yy<=99?yy<30?2000+yy:1900+yy:yy;// 월과 일 유효성 검사\nif(mm<1||mm>12)return false;// 월이 1~12 사이인지 확인\n// 월에 따라 일자 유효성 검사\nconst daysInMonth=new Date(year,mm,0).getDate();if(dd<1||dd>daysInMonth)return false;// 일자가 월의 일수 범위 내인지 확인\nreturn true;};// ----------------------------------------------------------------------------------------------------------------------------------------\n//*************************************** 나이 계산 함수 *******************************************\nconst calculateAge=birthDate=>{const[year,month,day]=[birthDate.slice(0,4),birthDate.slice(4,6),birthDate.slice(6,8)];const birthYear=parseInt(year,10);const currentYear=new Date().getFullYear();const age=currentYear-birthYear;return age;};// -------------------------------------- 성별 추출 함수 ----------------------------------------------\nconst getGender=genderCode=>{switch(genderCode){case'1':case'3':return'Male';// 1900년대 남성 또는 2000년대 남성\ncase'2':case'4':return'Female';// 1900년대 여성 또는 2000년대 여성\ndefault:return'Unknown';}};// 입력값 처리 함수\nconst birthHandleChange=e=>{let value=e.target.value;// 숫자만 허용\nvalue=value.replace(/[^\\d]/g,'');// 하이픈 추가\nif(value.length>6){value=value.slice(0,6)+'-'+value.slice(6,7);}setMemberBirth(value);// 주민등록번호가 올바른 형식일 경우에만 나이와 성별 계산\nif(/^\\d{6}-[1-4]$/.test(value)){const[datePart,genderPart]=value.split('-');const yearPrefix=genderPart==='1'||genderPart==='2'?'19':'20';const fullDate=yearPrefix+datePart;const age=calculateAge(fullDate);const gender=getGender(genderPart);setMemberAge(age);setMemberGender(gender);}else{setMemberAge('');setMemberGender('');}};/* ----------------------------------아이디를 입력했을 때 그 값이 DB에 중복된 값이 없는지 미리 확인하고 true false 반환하여 중복 여부 확인 버튼에서 사용 ---------------------------------------------*/const memberIdCheck=inputId=>{// inputId : 현재 입력한 ID 대입\nsetMemberId(inputId);// 비동기로 아이디 중복 검사 수행\nfetch(\"/memberIdCheck?id=\"+inputId,{method:\"GET\",headers:{\"content-type\":\"application/json\"}})// url 주소로 이동할 때 inputId 값을 들고 가서 비교하겠다.\n.then(resp=>resp.text()).then(result=>{// 중복이 아닐 때 true, 중복이면 false\nif(Number(result)===0)setMemberIdValidation(true);else setMemberIdValidation(false);});};// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n// ****************************************************************** 아이디 중복 검사 버튼 및 아이디 정규식 모음 ************************************************************************\nconst duplicationIdCheck=()=>{if(!memberId.trim()){alert(\"아이디를 입력해주세요.\");return;}if(consonantVowelRegex.test(memberId)){alert(\"올바른 형식으로 입력해주세요.\");setMemberIdValidation(false);return;}if(memberId.length<8||memberId.length>15){alert(\"올바르지 않은 형식입니다.\");return;}if(memberIdValidation){alert(\"사용 가능한 아이디입니다.\");}else{alert(\"중복 되는 아이디가 존재합니다.\");return;}};// *******************************************************************************************************************************************************************************\nconst MemberSignUpButton=()=>{//아이디가 유효하지 않을 때 \nif(!memberIdValidation){alert(\"아이디 중복 검사를 확인 해주세요. \");return;}// 비밀번호 공백 불가\nif(!memberPw||!memberPwCheck){alert(\"비밀번호를 입력해주세요.\");return;}// 비밀번호가 불일치\nif(memberPw!==memberPwCheck){alert(\"비밀번호가 일치하지 않습니다.\");return;}// 비밀번호 정규식\nif(!passwordRegex.test(memberPw)||!passwordRegex.test(memberPwCheck)){alert(\"비밀번호를 올바른 형식으로 입력해주세요.\");return;}// 주민번호 공백 불가\nif(!memberBirth.trim()){alert(\"생년월일을 입력해주세요.\");return;}// 주민번호 정규식 \nif(!birthRegex.test(memberBirth)){alert(\"생년월일 형식을 올바르게 입력해주세요. (oooooo-o)\");return;}// **************************************************************   사용자 입력 정보의 집합   ***********************************************************************\nconst memberInputInfo={};memberInputInfo.memberId=memberId;memberInputInfo.memberPw=memberPw;memberInputInfo.memberPwCheck=memberPwCheck;memberInputInfo.memberName=userInfo.response.name;memberInputInfo.memberAge=memberAge;memberInputInfo.memberGender=memberGender;memberInputInfo.memberBirth=memberBirth;memberInputInfo.memberEmail=userInfo.response.email;memberInputInfo.memberAddress=memberAddress;memberInputInfo.memberPhone=userInfo.response.mobile;/*********************************************************************************************************************************************************************/// ****************************************************************** 회원 가입 INPUT 정보 Controller 로 보내는 Fetch ***********************************************************************      \nfetch(\"/memberSignUp\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify(memberInputInfo)}).then(response=>response.text()).then(result=>{if(Number(result)>0){alert(\"회원 가입이 완료되었습니다.\");setMemberId(\"\");setMemberPw(\"\");setMemberPwCheck(\"\");setMemberBirth(\"\");setMemberAddress(\"\");navigate('/');}else{alert(\"회원 가입이 실패하였습니다.\");}});};// *************************************************************************************************************************************************************************************\n// 어떠한 동작(클릭 등) 이 없어도, UserInfo 페이지에 들어오면 자동으로 실행되는 효과\nuseEffect(()=>{// URLSearchParams: URL 에서 ? 뒤에 붙어있는 Key - Value 값을 가져온다.\n// String redirectUrl = \"http://localhost:3000/userinfo?access_token=\" + accessToken;\n// userinfo? 뒤에 붙어있는 access_token 에 있는 데이터를 포함한다.\nconst a=new URLSearchParams(location.search);const accessToken=a.get('access_token');console.log(\"토큰 확인: \"+accessToken);// URLSearchParams 로 가져온 수 많은 값 중에서, Key 명칭이 access_token 인 값만 가져오겠다는 의미의 코드이다.\n// get 을 이용하여 userinfo 정보 가져오기\n// Java 에서는 userinfo?access_token= 뒤에 + 를 붙여 변수를 사용했지만,\n// JS 에서는 `` 을 사용해서 const accessToken = a.get('access_token');\n// 만약, accessToken 값이 존재하면 axios 를 발동\nif(accessToken){axios.get(`/signup/naver?access_token=${accessToken}`).then(response=>{// .then((res) => { ◀ (res) 형식으로 ( ) 를 사용하여 res 를 막아버리면, => 이후로는 res 가 선언되지 않은,\n// 즉, 지역변수명이 되기 때문에 res 를 찾을 수 없게 된다.\nsetUserInfo(response.data);setLoading(false);}).catch(err=>{alert(err,\"정보를 정상적으로 가져오지 못했습니다.\");});}},[location.search]);// location.search 로 검색된 Key - Value 값 중, access_token(= 특정 값) 값을 가져오면 useEffect 를 사용하겠다는 의미의 코드이다.\nif(loading){return/*#__PURE__*/_jsx(\"div\",{children:\"\\uB370\\uC774\\uD130 \\uC815\\uBCF4 \\uAC00\\uC838\\uC624\\uB294 \\uC911...\"});}return/*#__PURE__*/_jsxs(\"div\",{class:\"naver\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"table-naver-wrapper\",children:/*#__PURE__*/_jsxs(\"table\",{className:\"table-naver\",children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsx(\"tr\",{children:/*#__PURE__*/_jsx(\"th\",{colSpan:\"2\",children:\"\\uD68C\\uC6D0 \\uC815\\uBCF4\"})})}),/*#__PURE__*/_jsxs(\"tbody\",{children:[/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{className:\"label-cell\",children:\"\\uC774 \\uBA54 \\uC77C:\"}),/*#__PURE__*/_jsx(\"td\",{children:/*#__PURE__*/_jsx(\"input\",{type:\"email\",value:userInfo.response.email,className:\"input-field\"})})]}),/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{className:\"label-cell\",children:\"\\uB2C9\\uB124\\uC784:\"}),/*#__PURE__*/_jsx(\"td\",{children:/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:userInfo.response.nickname,className:\"input-field\"})})]}),/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{className:\"label-cell\",children:\"\\uC774\\uB984:\"}),/*#__PURE__*/_jsx(\"td\",{children:/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:userInfo.response.name,className:\"input-field\"})})]}),/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{className:\"label-cell\",children:\"\\uD504\\uB85C\\uD544 \\uC774\\uBBF8\\uC9C0:\"}),/*#__PURE__*/_jsx(\"td\",{children:/*#__PURE__*/_jsx(\"img\",{src:userInfo.response.profile_image,alt:\"Profile\",className:\"profile-image\"})})]}),/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{className:\"label-cell\",children:\"\\uC804\\uD654\\uBC88\\uD638:\"}),/*#__PURE__*/_jsx(\"td\",{children:/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:userInfo.response.mobile,className:\"input-field\"})})]})]})]})}),/*#__PURE__*/_jsxs(\"div\",{className:\"login-naver\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"\\uD68C\\uC6D0\\uAC00\\uC785 \\uD544\\uC218\\uC815\\uBCF4\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:memberId,className:memberIdValidation?\"\":\"memberId-error\",onChange:e=>{memberIdCheck(e.target.value);},placeholder:\"\\uC544\\uC774\\uB514\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\",required:true}),memberId&&(idRegex.test(memberId)?/*#__PURE__*/_jsx(\"p\",{style:{color:\"green\",margin:\"0\",fontSize:\"13px\"},children:\"\\uC62C\\uBC14\\uB978 \\uD615\\uC2DD\\uC785\\uB2C8\\uB2E4.\"}):/*#__PURE__*/_jsx(\"p\",{style:{color:\"red\",margin:\"0\",fontSize:\"13px\"},children:\"8 ~ 15 \\uC790 \\uC601\\uBB38 \\uB610\\uB294 \\uC22B\\uC790\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\"})),/*#__PURE__*/_jsx(\"button\",{className:\"btna btn-dark\",onClick:duplicationIdCheck,children:\"\\uC544\\uC774\\uB514 \\uC911\\uBCF5 \\uD655\\uC778\"}),/*#__PURE__*/_jsx(\"input\",{className:\"naver-input\",type:\"password\",value:memberPw,onChange:e=>setMemberPw(e.target.value),placeholder:\"\\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\",required:true}),/*#__PURE__*/_jsx(\"input\",{className:\"naver-input\",type:\"password\",value:memberPwCheck,onChange:e=>setMemberPwCheck(e.target.value),placeholder:\"\\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uC7AC \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\",required:true}),isInputFilled&&/*#__PURE__*/_jsx(_Fragment,{children:isPasswordValid&&arePasswordsMatching?/*#__PURE__*/_jsx(\"p\",{style:{color:\"green\",margin:\"0\",fontSize:\"13px\"},children:\"\\uBE44\\uBC00\\uBC88\\uD638\\uAC00 \\uC77C\\uCE58\\uD569\\uB2C8\\uB2E4.\"}):/*#__PURE__*/_jsxs(_Fragment,{children:[!arePasswordsMatching&&/*#__PURE__*/_jsx(\"p\",{style:{color:\"red\",margin:\"0\",fontSize:\"13px\"},children:\"\\uBE44\\uBC00\\uBC88\\uD638\\uAC00 \\uC77C\\uCE58\\uD558\\uC9C0 \\uC54A\\uC2B5\\uB2C8\\uB2E4.\"}),!isPasswordValid&&/*#__PURE__*/_jsx(\"p\",{style:{color:\"red\",margin:\"0\",fontSize:\"13px\"},children:\"\\uBE44\\uBC00\\uBC88\\uD638\\uB294 10 ~ 15 \\uC790, \\uD2B9\\uC218\\uBB38\\uC790\\uB97C \\uD3EC\\uD568\\uD574\\uC57C \\uD569\\uB2C8\\uB2E4.\"})]})}),/*#__PURE__*/_jsx(\"input\",{className:\"naver-input\",type:\"text\",value:memberBirth,onChange:birthHandleChange,placeholder:\"\\uC8FC\\uBBFC\\uBC88\\uD638 7\\uC790\\uB9AC\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694 / (-) \\uC790\\uB3D9 \\uC0DD\\uC131\",required:true,maxLength:\"8\"// 하이픈 포함 최대 8자리\n}),memberBirth&&/*#__PURE__*/_jsx(\"p\",{style:{color:birthRegex.test(memberBirth)&&isDateValid(memberBirth)?\"green\":\"red\",margin:\"0\",fontSize:\"13px\"},children:birthRegex.test(memberBirth)&&isDateValid(memberBirth)?`올바른 형식입니다.`:\"형식이 올바르지 않습니다.\"}),/*#__PURE__*/_jsx(AddressSearch,{onAddressChange:handleAddressChange}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"btna btn-dark\",onClick:MemberSignUpButton,children:\"\\uD68C\\uC6D0\\uAC00\\uC785\"})]})]});}export default NaverSignup;","map":{"version":3,"names":["React","useContext","useEffect","useState","axios","useLocation","LoginContext","useNavigate","AddressSearch","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","NaverSignup","userInfo","setUserInfo","memberId","setMemberId","memberPw","setMemberPw","memberPwCheck","setMemberPwCheck","memberBirth","setMemberBirth","memberAge","setMemberAge","memberGender","setMemberGender","memberAddress","setMemberAddress","loading","setLoading","location","loginMember","idRegex","passwordRegex","consonantVowelRegex","birthRegex","memberIdValidation","setMemberIdValidation","navigate","handleAddressChange","address","isPasswordValid","test","arePasswordsMatching","isInputFilled","isDateValid","birthDate","datePart","genderPart","split","length","yy","parseInt","slice","mm","dd","year","daysInMonth","Date","getDate","calculateAge","month","day","birthYear","currentYear","getFullYear","age","getGender","genderCode","birthHandleChange","e","value","target","replace","yearPrefix","fullDate","gender","memberIdCheck","inputId","fetch","method","headers","then","resp","text","result","Number","duplicationIdCheck","trim","alert","MemberSignUpButton","memberInputInfo","memberName","response","name","memberEmail","email","memberPhone","mobile","body","JSON","stringify","a","URLSearchParams","search","accessToken","get","console","log","data","catch","err","children","class","className","colSpan","type","nickname","src","profile_image","alt","onChange","placeholder","required","style","color","margin","fontSize","onClick","maxLength","onAddressChange"],"sources":["C:/Users/user1/Desktop/sixsence/Sixsence/src/main/sixsence-front/src/login/NaverSignup.js"],"sourcesContent":["import React, {useContext, useEffect, useState} from 'react';\r\nimport axios from 'axios';\r\nimport { useLocation } from 'react-router-dom'; // 버튼 클릭 없이 위치 설정\r\nimport LoginContext from './LoginContext';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport AddressSearch from \"./AddressSearch\";\r\nimport \"../css/NaverTable.css\";\r\n/* \r\nuseLocation: URL 의 정보를 포함한 객체이다.\r\n             경로, hash, 문자열 값 등을 가지고 온 객체이다.\r\n*/\r\n\r\nexport function NaverSignup() {\r\n    const [userInfo, setUserInfo] = useState(null);\r\n    /***** 2024-08-12 비밀번호 값 설정 추가 *****/\r\n    const [memberId, setMemberId] = useState(\"\");\r\n    const [memberPw, setMemberPw] = useState(\"\");\r\n    const [memberPwCheck, setMemberPwCheck] = useState(\"\");\r\n    const [memberBirth, setMemberBirth] = useState(\"\");\r\n    const [memberAge, setMemberAge] = useState(\"\");\r\n    const [memberGender, setMemberGender] = useState(\"\");\r\n    const [memberAddress, setMemberAddress] = useState(\"\");\r\n\r\n    const [loading, setLoading] = useState(true);\r\n    const location = useLocation();\r\n    const {loginMember} = useContext(LoginContext);\r\n\r\n    // 정규식\r\n    const idRegex = /^[a-zA-Z0-9]{8,15}$/ \r\n    const passwordRegex = /^(?=.*[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z0-9!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]{10,15}$/;\r\n    const consonantVowelRegex = /^[ㄱ-ㅎㅏ-ㅣ]+$/;  \r\n    const birthRegex = /^\\d{6}-[1-4]$/;\r\n\r\n    // ID 중복 검사 변수\r\n    const [memberIdValidation, setMemberIdValidation] = useState(false);\r\n    // useNavigate 훅 호출\r\n    const navigate = useNavigate(); \r\n\r\n    // 주소 핸들러\r\n    const handleAddressChange = (address) => {\r\n      setMemberAddress(address);\r\n    };\r\n\r\n    // 비밀번호 입력시 <p> 태그 활용하기 위해서 \r\n    const isPasswordValid = passwordRegex.test(memberPw) && passwordRegex.test(memberPwCheck);\r\n    const arePasswordsMatching = memberPw === memberPwCheck;\r\n    const isInputFilled = memberPw && memberPwCheck;\r\n\r\n\r\n  //---------------------------------------------주민번호 날짜 관련 정규식 부가적인 요소------------------------------------------------\r\n// 날짜 유효성 검사 함수\r\nconst isDateValid = (birthDate) => {\r\n  const [datePart, genderPart] = birthDate.split('-');\r\n  \r\n  // 날짜 부분이 올바른지 확인\r\n  if (datePart.length !== 6 || !/^\\d{6}$/.test(datePart) || !/^[1-4]$/.test(genderPart)) {\r\n      return false;\r\n  }\r\n  \r\n  // 연도, 월, 일 추출\r\n  const yy = parseInt(datePart.slice(0, 2), 10);\r\n  const mm = parseInt(datePart.slice(2, 4), 10);\r\n  const dd = parseInt(datePart.slice(4, 6), 10);\r\n  \r\n  // YY를 YYYY로 변환\r\n  const year = yy >= 0 && yy <= 99 ? (yy < 30 ? 2000 + yy : 1900 + yy) : yy;\r\n  \r\n  // 월과 일 유효성 검사\r\n  if (mm < 1 || mm > 12) return false; // 월이 1~12 사이인지 확인\r\n  \r\n  // 월에 따라 일자 유효성 검사\r\n  const daysInMonth = new Date(year, mm, 0).getDate();\r\n  if (dd < 1 || dd > daysInMonth) return false; // 일자가 월의 일수 범위 내인지 확인\r\n  \r\n  return true;\r\n};\r\n// ----------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n  //*************************************** 나이 계산 함수 *******************************************\r\nconst calculateAge = (birthDate) => {\r\n  const [year, month, day] = [birthDate.slice(0, 4), birthDate.slice(4, 6), birthDate.slice(6, 8)];\r\n  const birthYear = parseInt(year, 10);\r\n  const currentYear = new Date().getFullYear();\r\n  const age = currentYear - birthYear;\r\n  return age;\r\n};\r\n\r\n// -------------------------------------- 성별 추출 함수 ----------------------------------------------\r\nconst getGender = (genderCode) => {\r\n  switch (genderCode) {\r\n      case '1': case '3':\r\n          return 'Male'; // 1900년대 남성 또는 2000년대 남성\r\n      case '2': case '4':\r\n          return 'Female'; // 1900년대 여성 또는 2000년대 여성\r\n      default:\r\n          return 'Unknown';\r\n  }\r\n};\r\n   // 입력값 처리 함수\r\n   const birthHandleChange = (e) => {\r\n      let value = e.target.value;\r\n      \r\n      // 숫자만 허용\r\n      value = value.replace(/[^\\d]/g, '');\r\n      \r\n      // 하이픈 추가\r\n      if (value.length > 6) {\r\n          value = value.slice(0, 6) + '-' + value.slice(6, 7);\r\n      }\r\n      \r\n      setMemberBirth(value);\r\n      \r\n      // 주민등록번호가 올바른 형식일 경우에만 나이와 성별 계산\r\n      if (/^\\d{6}-[1-4]$/.test(value)) {\r\n          const [datePart, genderPart] = value.split('-');\r\n          const yearPrefix = genderPart === '1' || genderPart === '2' ? '19' : '20';\r\n          const fullDate = yearPrefix + datePart;\r\n          const age = calculateAge(fullDate);\r\n          const gender = getGender(genderPart);\r\n          setMemberAge(age);\r\n          setMemberGender(gender);\r\n      } else {\r\n          setMemberAge('');\r\n          setMemberGender('');\r\n      }\r\n  };\r\n\r\n  /* ----------------------------------아이디를 입력했을 때 그 값이 DB에 중복된 값이 없는지 미리 확인하고 true false 반환하여 중복 여부 확인 버튼에서 사용 ---------------------------------------------*/\r\n\r\n\r\n  const memberIdCheck = (inputId) => {\r\n    // inputId : 현재 입력한 ID 대입\r\n      setMemberId(inputId);\r\n    // 비동기로 아이디 중복 검사 수행\r\n    fetch(\"/memberIdCheck?id=\" + inputId,{\r\n      method:\"GET\",\r\n      headers : {\"content-type\":\"application/json\"},\r\n    }) // url 주소로 이동할 때 inputId 값을 들고 가서 비교하겠다.\r\n    .then(resp => resp.text())\r\n    .then(result => {\r\n\r\n      // 중복이 아닐 때 true, 중복이면 false\r\n      if(Number(result) === 0) \r\n        setMemberIdValidation(true);\r\n      else                     \r\n      setMemberIdValidation(false);\r\n    })\r\n  } \r\n  // -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n  // ****************************************************************** 아이디 중복 검사 버튼 및 아이디 정규식 모음 ************************************************************************\r\n  const duplicationIdCheck = () => { \r\n    if (!memberId.trim()) {\r\n        alert(\"아이디를 입력해주세요.\");\r\n        return;\r\n    } \r\n    if (consonantVowelRegex.test(memberId)) {\r\n        alert(\"올바른 형식으로 입력해주세요.\");\r\n        setMemberIdValidation(false);\r\n        return;\r\n    }\r\n    if(memberId.length < 8 || memberId.length > 15){\r\n        alert(\"올바르지 않은 형식입니다.\");\r\n        return;\r\n    }    \r\n    if(memberIdValidation){\r\n        alert(\"사용 가능한 아이디입니다.\");\r\n    } else {\r\n        alert(\"중복 되는 아이디가 존재합니다.\");\r\n        return;\r\n    }\r\n    }\r\n    // *******************************************************************************************************************************************************************************\r\n    \r\n    const MemberSignUpButton = () => {\r\n        \r\n      //아이디가 유효하지 않을 때 \r\n      if(!memberIdValidation){\r\n          alert(\"아이디 중복 검사를 확인 해주세요. \");\r\n          return;\r\n      }\r\n      // 비밀번호 공백 불가\r\n      if(!memberPw || !memberPwCheck){\r\n          alert(\"비밀번호를 입력해주세요.\");\r\n          return;\r\n      }\r\n      // 비밀번호가 불일치\r\n      if(memberPw !== memberPwCheck){\r\n          alert(\"비밀번호가 일치하지 않습니다.\");\r\n          return;\r\n      }\r\n      // 비밀번호 정규식\r\n      if(!passwordRegex.test(memberPw) || !passwordRegex.test(memberPwCheck)){\r\n          alert(\"비밀번호를 올바른 형식으로 입력해주세요.\");\r\n          return;\r\n      }\r\n      // 주민번호 공백 불가\r\n      if(!memberBirth.trim()){\r\n          alert(\"생년월일을 입력해주세요.\");\r\n          return;\r\n      }\r\n      // 주민번호 정규식 \r\n      if (!birthRegex.test(memberBirth)) {\r\n          alert(\"생년월일 형식을 올바르게 입력해주세요. (oooooo-o)\");\r\n          return;\r\n      }\r\n     \r\n      // **************************************************************   사용자 입력 정보의 집합   ***********************************************************************\r\n      const memberInputInfo = {};\r\n      memberInputInfo.memberId = memberId;\r\n      memberInputInfo.memberPw = memberPw;\r\n      memberInputInfo.memberPwCheck = memberPwCheck;\r\n      memberInputInfo.memberName = userInfo.response.name;\r\n      memberInputInfo.memberAge = memberAge;\r\n      memberInputInfo.memberGender = memberGender;\r\n      memberInputInfo.memberBirth = memberBirth;\r\n      memberInputInfo.memberEmail = userInfo.response.email;\r\n      memberInputInfo.memberAddress = memberAddress;\r\n      memberInputInfo.memberPhone = userInfo.response.mobile;\r\n      /*********************************************************************************************************************************************************************/\r\n\r\n      // ****************************************************************** 회원 가입 INPUT 정보 Controller 로 보내는 Fetch ***********************************************************************      \r\n      fetch(\"/memberSignUp\", {\r\n        method : \"POST\",\r\n        headers : {\"Content-Type\" : \"application/json\"},\r\n        body : JSON.stringify(memberInputInfo)\r\n    })\r\n    .then(response => response.text())\r\n    .then(result => {\r\n\r\n        if(Number(result) > 0){\r\n            alert(\"회원 가입이 완료되었습니다.\");\r\n            \r\n            setMemberId(\"\")\r\n            setMemberPw(\"\")\r\n            setMemberPwCheck(\"\")\r\n            setMemberBirth(\"\")\r\n            setMemberAddress(\"\")\r\n           \r\n            navigate('/'); \r\n        } else {\r\n            alert(\"회원 가입이 실패하였습니다.\");\r\n        }\r\n    })\r\n}\r\n// *************************************************************************************************************************************************************************************\r\n\r\n\r\n    // 어떠한 동작(클릭 등) 이 없어도, UserInfo 페이지에 들어오면 자동으로 실행되는 효과\r\n    useEffect(() => {\r\n        // URLSearchParams: URL 에서 ? 뒤에 붙어있는 Key - Value 값을 가져온다.\r\n        // String redirectUrl = \"http://localhost:3000/userinfo?access_token=\" + accessToken;\r\n        // userinfo? 뒤에 붙어있는 access_token 에 있는 데이터를 포함한다.\r\n        const a = new URLSearchParams(location.search);\r\n        const accessToken = a.get('access_token');\r\n        console.log(\"토큰 확인: \" + accessToken);\r\n        // URLSearchParams 로 가져온 수 많은 값 중에서, Key 명칭이 access_token 인 값만 가져오겠다는 의미의 코드이다.\r\n\r\n        // get 을 이용하여 userinfo 정보 가져오기\r\n        // Java 에서는 userinfo?access_token= 뒤에 + 를 붙여 변수를 사용했지만,\r\n        // JS 에서는 `` 을 사용해서 const accessToken = a.get('access_token');\r\n\r\n        // 만약, accessToken 값이 존재하면 axios 를 발동\r\n        if(accessToken){\r\n        axios.get(`/signup/naver?access_token=${accessToken}`)\r\n        .then(response => { // .then((res) => { ◀ (res) 형식으로 ( ) 를 사용하여 res 를 막아버리면, => 이후로는 res 가 선언되지 않은,\r\n            // 즉, 지역변수명이 되기 때문에 res 를 찾을 수 없게 된다.\r\n            setUserInfo(response.data);\r\n            setLoading(false);\r\n        })\r\n        .catch((err) => {\r\n            alert(err, \"정보를 정상적으로 가져오지 못했습니다.\");\r\n        })\r\n    }\r\n\r\n    }, [location.search]); // location.search 로 검색된 Key - Value 값 중, access_token(= 특정 값) 값을 가져오면 useEffect 를 사용하겠다는 의미의 코드이다.\r\n\r\n    if(loading) {\r\n        return <div>데이터 정보 가져오는 중...</div>\r\n    }\r\n\r\n    return (\r\n        <div class=\"naver\">\r\n            \r\n      <div className=\"table-naver-wrapper\">\r\n      <table className=\"table-naver\">\r\n        <thead>\r\n          <tr>\r\n            <th colSpan=\"2\">회원 정보</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n         \r\n          <tr>\r\n            <td className=\"label-cell\">이 메 일:</td>\r\n            <td>\r\n              <input type='email' value={userInfo.response.email} className=\"input-field\" />\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td className=\"label-cell\">닉네임:</td>\r\n            <td>\r\n              <input type='text' value={userInfo.response.nickname}  className=\"input-field\" />\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td className=\"label-cell\">이름:</td>\r\n            <td>\r\n              <input type='text' value={userInfo.response.name}  className=\"input-field\" />\r\n            </td>\r\n          </tr>\r\n         \r\n          <tr>\r\n            <td className=\"label-cell\">프로필 이미지:</td>\r\n            <td>\r\n              <img src={userInfo.response.profile_image} alt=\"Profile\" className=\"profile-image\" />\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td className=\"label-cell\">전화번호:</td>\r\n            <td>\r\n            <input type='text' value={userInfo.response.mobile}  className=\"input-field\" />\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div> \r\n\r\n      <div className=\"login-naver\">\r\n          <h1>회원가입 필수정보</h1>\r\n          {/*-------------------------------------------------------------------------- 아이디 --------------------------------------------------------------------------*/}\r\n        \r\n              <input  type=\"text\" value={memberId} className= {memberIdValidation ? \"\" : \"memberId-error\"}  \r\n              onChange={e => {memberIdCheck(e.target.value)}} placeholder=\"아이디를 입력해주세요.\" required/>\r\n          \r\n          {memberId && ( \r\n          idRegex.test(memberId) ? (\r\n              <p style={{ color: \"green\", margin: \"0\", fontSize: \"13px\" }}>\r\n                  올바른 형식입니다.\r\n              </p>\r\n          ) : (\r\n              <p style={{ color: \"red\", margin: \"0\", fontSize: \"13px\" }}>\r\n                  8 ~ 15 자 영문 또는 숫자를 입력해주세요.\r\n              </p>\r\n          )\r\n          )}\r\n        \r\n          <button className=\"btna btn-dark\" onClick={duplicationIdCheck}>아이디 중복 확인</button>\r\n          {/*------------------------------------------------------------------------------------------------------------------------------------------------------------------*/}\r\n\r\n          {/*************************************************************************** 비밀번호 ********************************************************************************/ }\r\n          \r\n              <input className='naver-input' type=\"password\" value={memberPw} \r\n              onChange={e => setMemberPw(e.target.value)} placeholder=\"비밀번호를 입력해주세요.\" required/>\r\n          \r\n\r\n          \r\n              <input className='naver-input' type=\"password\" value={memberPwCheck} \r\n              onChange={e => setMemberPwCheck(e.target.value)} placeholder=\"비밀번호를 재 입력해주세요.\" required/>\r\n          \r\n          \r\n          {isInputFilled && (\r\n              <>\r\n                  {isPasswordValid && arePasswordsMatching ? (\r\n                      <p style={{ color: \"green\", margin: \"0\", fontSize: \"13px\" }}>비밀번호가 일치합니다.</p>\r\n                  ) : (\r\n                      <>\r\n                          {!arePasswordsMatching && (\r\n                              <p style={{ color: \"red\", margin: \"0\", fontSize: \"13px\" }}>비밀번호가 일치하지 않습니다.</p>\r\n                          )}\r\n                          {!isPasswordValid && (\r\n                              <p style={{ color: \"red\", margin: \"0\", fontSize: \"13px\" }}>\r\n                                  비밀번호는 10 ~ 15 자, 특수문자를 포함해야 합니다.\r\n                              </p>\r\n                          )}\r\n                      </>\r\n                  )}\r\n              </>\r\n          )}\r\n          {/********************************************************************************************************************************************************************/ }\r\n\r\n\r\n      {/* ******************************************************************** 주민번호 ************************************************************************** */}\r\n              \r\n              <input\r\n                  className='naver-input'\r\n                  type=\"text\"\r\n                  value={memberBirth}\r\n                  onChange={birthHandleChange}\r\n                  placeholder=\"주민번호 7자리를 입력해주세요 / (-) 자동 생성\"\r\n                  required\r\n                  maxLength=\"8\" // 하이픈 포함 최대 8자리\r\n              />\r\n              {memberBirth && (\r\n                  <p style={{ color: (birthRegex.test(memberBirth) && isDateValid(memberBirth)) ? \"green\" : \"red\", margin: \"0\", fontSize: \"13px\" }}>\r\n                      {birthRegex.test(memberBirth) && isDateValid(memberBirth) ? \r\n                          `올바른 형식입니다.` : \r\n                          \"형식이 올바르지 않습니다.\"}\r\n                  </p>\r\n              )}\r\n          \r\n      {/* ****************************************************************************************************************************************************************** */}\r\n              \r\n      \r\n      {/* ********************************************************************** 주소 ************************************************************************** */}\r\n\r\n              <AddressSearch onAddressChange={handleAddressChange}/>\r\n        \r\n      {/* ******************************************************************************************************************************************************** */}\r\n\r\n              <button type=\"submit\" className=\"btna btn-dark\" onClick={MemberSignUpButton}>회원가입</button>\r\n          \r\n          \r\n          </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default NaverSignup;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}